[
  
  
  {
    "title": "Booking",
    
    "url": "/api/classes/booking/",
    "body": " Booking This API allow users to sign up (book) and sign out (cancel) for fitness classes.  Execute class booking Execute class cancel   Execute class booking POST Classes/BookClass  Request signs up user for fitness class.  Parameters    Name Type Description     classId long  Required. Class identifier. Request signs up user for fitness class identified by classId.   userId long  Required. User identifier. Request signs up user identified by userId for fitness class.     Response Class details if booking is successful, or collection of errors with class booking error codes otherwise.  Example request In this example we sign up user with id = 40 for classes with id = 1677  curl -i -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/BookClass/ ?classId=1677 &amp;userId=40   Example response Status: 200 OK  { \"elements\": [ { \"booked\": true, \"attended\": false, \"userClassRating\": \"\", \"userInstructorRating\": \"\", \"classType\": { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, \"instructor\": { \"id\": 52, \"timestamp\": 376826, \"firstName\": \"Agatha\", \"lastName\": \"Strickland\", \"displayName\": \"Agatha Strickland\", \"email\": \"a.strickland@cyberbotics.com\", \"sex\": \"Female\", \"rating\": { \"rating\": 4.7, \"votesCount\": 1234, \"rankingSort\": 3.3 }, \"isActive\": true, \"isDeleted\": false }, \"club\": { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, \"id\": 1677, \"timestamp\": 254718, \"isDeleted\": false, \"startDate\": \"2015-12-03T06:15:00\", \"endDate\": \"2015-12-03T07:15:00\", \"attendeesCount\": 7, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] }   Example error response Subsequent booking for class with id =1677 and for user with id = 40 generates following error: Status: 400 Bad Request  { \"errors\": [ { \"code\": \"ClassAlreadyBooked\", \"property\": \"\", \"message\": \"\" } ] }   Execute class cancel POST Classes/CancelBooking  Request cancels user booking.  Parameters    Name Type Description     classId long  Required. Class identifier. Request cancels user booking for fitness class identified by classId.   userId long  Required. User identifier. Request cancels user identified by userId booking for fitness class.     Response Class details if class cancel is successful, or collection of errors with class cancel error codes otherwise.  Example request In this example we cancel booking of user with id = 40 for classes with id = 1677  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/CancelBooking ?classId=1677 &amp;userId=40   Example response Status: 200 OK  { \"elements\": [ { \"booked\": false, \"attended\": false, \"userClassRating\": \"\", \"userInstructorRating\": \"\", \"classType\": { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, \"instructor\": { \"id\": 52, \"timestamp\": 376826, \"firstName\": \"Agatha\", \"lastName\": \"Strickland\", \"displayName\": \"Agatha Strickland\", \"email\": \"a.strickland@cyberbotics.com\", \"sex\": \"Female\", \"rating\": { \"rating\": 4.7, \"votesCount\": 1234, \"rankingSort\": 3.3 }, \"isActive\": true, \"isDeleted\": false }, \"club\": { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, \"id\": 1677, \"timestamp\": 254718, \"isDeleted\": false, \"startDate\": \"2015-12-03T06:15:00\", \"endDate\": \"2015-12-03T07:15:00\", \"attendeesCount\": 6, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] }   Example error response Subsequent cancel for class with id =1677 and for user with id = 40 generates following error: Status: 400 Bad Request  { \"errors\": [ { \"code\": \"ClassNotBooked\", \"property\": \"\", \"message\": \"\" } ] } "
  },
  
  
  {
    "title": "Classes",
    
    "url": "/api/classes/classes/",
    "body": " Classes Class represents fitness class conducted in your club.   Class properties List classes in a given timeframe List classes with timestamp    Class properties Class is described by the following properties    Name Type Description     classType Class type Class type.   instructor Instructor Instructor conducting class.   club Club Club class take place in.   id long Unique identifier of class.   timestamp long Timestamp. Indicates when resource was last modified.   isDeleted bool Indicates if resource is deleted.   startDate datetime Class start date and time.   endDate datetime Class end date and time.   attendeesCount int Number of users signed up for class.   attendeesLimit int Maximum number of attendees allowed to attend class. null if there is no limit.     List classes in a given timeframe GET Classes/Classes  Returns paginated classes list.  Parameters    Name Type Description     clubId long  Required. Club identifier. Request returns classes that take place in club identified by clubId.   startDate datetime  Required. Start date. Request returns classes that starts leter then startDate.   endDate datetime  Required. End date. Request returns classes that ends earlier then endtDate.   page int Page number, defaults to 1.     Example request In this example we fetch first 100 classes in club with id = 2, that starts in december 2015  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/Classes ?clubId=2 &amp;startDate=2015-12-01T00:00:00 &amp;endDate=2015-12-31T23:59:59   Example response Status: 200 OK  { \"elements\": [ { \"classType\": { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, \"instructor\": { \"id\": 52, \"timestamp\": 376826, \"firstName\": \"Agatha\", \"lastName\": \"Strickland\", \"displayName\": \"Agatha Strickland\", \"email\": \"a.strickland@cyberbotics.com\", \"sex\": \"Female\", \"rating\": { \"rating\": 4.7, \"votesCount\": 1234, \"rankingSort\": 3.3 }, \"isActive\": true, \"isDeleted\": false }, \"club\": { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, \"id\": 1677, \"timestamp\": 254718, \"isDeleted\": false, \"startDate\": \"2015-12-03T06:15:00\", \"endDate\": \"2015-12-03T07:15:00\", \"attendeesCount\": 7, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] }   List classes with timestamp GET Classes/Classes  Returns paginated classes list.  Parameters    Name Type Description     clubId long  Required. Club identifier. Request returns classes that take place in club identified by clubId.   timestamp long Timestamp. Request returns classes with timestamp grater then timestamp, defaults to 0.     Example request In this example we fetch list of all classes in club with id = 2 and with timestamp greater then 254000  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/Classes ?clubId=2 &amp;timestamp=254000   Example response Status: 200 OK  { \"elements\": [ { \"classType\": { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, \"instructor\": { \"id\": 52, \"timestamp\": 376826, \"firstName\": \"Agatha\", \"lastName\": \"Strickland\", \"displayName\": \"Agatha Strickland\", \"email\": \"a.strickland@cyberbotics.com\", \"sex\": \"Female\", \"rating\": { \"rating\": 4.7, \"votesCount\": 1234, \"rankingSort\": 3.3 }, \"isActive\": true, \"isDeleted\": false }, \"club\": { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, \"id\": 1677, \"timestamp\": 254718, \"isDeleted\": false, \"startDate\": \"2015-12-03T06:15:00\", \"endDate\": \"2015-12-03T07:15:00\", \"attendeesCount\": 7, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] } "
  },
  
  
  {
    "title": "Classes types",
    
    "url": "/api/classes/classestypes/",
    "body": " Classes types Each fitness class has a class type assigned . Class type is for example 'Zumba', and a class is an instance of a class type (for example Zumba at 'Fibo' club, starting on 2015-12-21 18:00). Class types are global accross all clubs of a company (in case company has more then 1 club).   Class type properties List classes types with timestamp    Class type properties Class type is described by the following properties    Name Type Description     id long Unique identifier of class type.   timestamp long Timestamp. Indicates when resource was last modified.   isDeleted bool Indicates if resource is deleted.   name string Class type name.   description string Class type description.   rating Rating Class type rating.     List classes types with timestamp GET Classes/ClassesTypes  Returns paginated classes type list.  Parameters    Name Type Description     timestamp long Timestamp. Request returns classes types with timestamp grater then timestamp, defaults to 0.     Example request In this example we fetch list of all classes types (timestamp parameter defaults to 0) available in a company.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/ClassesTypes   Example response Status: 200 OK  { \"elements\": [ { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, { \"id\": 2, \"timestamp\": 382653, \"name\": \"POWER JOGA\", \"description\": \"Power Yoga is definitely an intense workout that will make you sweat.\", \"rating\": { \"rating\": 4.1, \"votesCount\": 4321, \"rankingSort\": 4.3 } } ] } "
  },
  
  
  {
    "title": "Ratings",
    
    "url": "/api/classes/ratings/",
    "body": " Ratings This API allow users to rate classes and instructors.  Overview Ranking  Rating properties Execute class rating Execute instructor rating   Overview In PerfectGym user can rate two entities:  Class types Instructors  To be able to submit rating user has to attend rated class. Using class id user rates class type and instructor conducting class. If class has no assigned instructor, user can rate only class type. Rating is an integer value of 1 to 5. Each class attandence allows user to submit rating for both: class type and instructor, even if element (class type or instructor) has been already rated. Subsequent ratings adds up to element rating.  Ranking Ratings data can be used to create class types or instructors rankings. Problem arises though: should element with rating 5 based on one submision be heigher then element with rating 4.7 based on 20 submitions? To solve this problem PerfectGym API calculates rankingFactor using Bayesian estimate. Sorting elements by rankingFactor ascending sets elements in the proper ranking order.    Rating properties Rating is described by the following properties    Name Type Description     rating decimal Avarage rating, if element was never rated, rating is null.   submitionsCount int Ratings count or 0 if element was never rated.   rankingFactor decimal Ranking factor allows to sort elements in proper ranking order.     Execute class rating POST Classes/RateClass  Request rates class on behalf of user.  Parameters    Name Type Description     classId long  Required. Class identifier. Request rates fitness class identified by classId.   userId long  Required. User identifier. Request rates fitness class on behalf of user identified by userId.   rating int  Required. Rating. Value of 1 to 5. Rating user assigns to selected classes.     Response Class details if class rating is successful, or collection of errors with class rating error codes otherwise.  Example request In this example we assign rating 5 to classes with id = 1677 by user with id = 40.  curl -i -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/RateClass ?classId=1677 &amp;userId=40 &amp;classRating=5   Example response Status: 200 OK  { \"elements\": [ { \"booked\": true, \"attended\": true, \"userClassRating\": 5, \"userInstructorRating\": \"\", \"classType\": { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, \"instructor\": { \"id\": 52, \"timestamp\": 376826, \"firstName\": \"Agatha\", \"lastName\": \"Strickland\", \"displayName\": \"Agatha Strickland\", \"email\": \"a.strickland@cyberbotics.com\", \"sex\": \"Female\", \"rating\": { \"rating\": 4.7, \"votesCount\": 1234, \"rankingSort\": 3.3 }, \"isActive\": true, \"isDeleted\": false }, \"club\": { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, \"id\": 1677, \"timestamp\": 254718, \"isDeleted\": false, \"startDate\": \"2015-12-03T06:15:00\", \"endDate\": \"2015-12-03T07:15:00\", \"attendeesCount\": 7, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] }   Example error response Subsequent rating for class with id = 1677 and for user with id = 40 generates following error: Status: 400 Bad Request  { \"errors\": [ { \"code\": \"ClassAlreadyRated\", \"property\": \"\", \"message\": \"\" } ] }   Execute instructor rating POST Classes/RateInstructor  Request rates instructor conducting class on behalf of user.  Parameters    Name Type Description     classId long  Required. Class identifier. Request rates instructor conducting class identified by classId.   userId long  Required. User identifier. Request rates instructor on behalf of user identified by userId.   rating int  Required. Rating. Value of 1 to 5. Rating user assigns to selected instructor.     Response Class details if instructor rating is successful, or collection of errors with instructor rating error codes otherwise.  Example request In this example we assign rating 4 to instructor conducting classes with id = 1677 by user with id = 40.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/RateInstructor ?classId=1677 &amp;userId=40 &amp;isntructorRating=4   Example response Status: 200 OK  { \"elements\": [ { \"booked\": true, \"attended\": true, \"userClassRating\": 5, \"userInstructorRating\": 4, \"classType\": { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, \"instructor\": { \"id\": 52, \"timestamp\": 376826, \"firstName\": \"Agatha\", \"lastName\": \"Strickland\", \"displayName\": \"Agatha Strickland\", \"email\": \"a.strickland@cyberbotics.com\", \"sex\": \"Female\", \"rating\": { \"rating\": 4.7, \"votesCount\": 1234, \"rankingSort\": 3.3 }, \"isActive\": true, \"isDeleted\": false }, \"club\": { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, \"id\": 1677, \"timestamp\": 254718, \"isDeleted\": false, \"startDate\": \"2015-12-03T06:15:00\", \"endDate\": \"2015-12-03T07:15:00\", \"attendeesCount\": 7, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] }   Example error response Subsequent instructor rating for class with id = 1677 and for user with id = 40 generates following error: Status: 400 Bad Request  { \"errors\": [ { \"code\": \"InstructorAlreadyRated\", \"property\": \"\", \"message\": \"\" } ] } "
  },
  
  
  {
    "title": "User classes",
    
    "url": "/api/classes/userclasses/",
    "body": " User classes User class represents fitness class conducted in your club.   Class properties List user classes in a given timeframe List user classes with timestamp Retrive user class with class identifier    Class properties User class holds the same data as Classes plus user specyfic properties. Only user specyfic properties are described here.    Name Type Description     booked bool  true if user is signed up for classes, false otherwise.   attended bool  true if user has attended classes, false otherwise.   userClassRating int User class rating. Value of 1 - 5, represents user rating of selected class. null if user didn't rate class.   userInstructorRating int User instructor rating. Value of 1 - 5, represents user rating of instructor conducting class. null if user didn't rate instructor.     List user classes in a given timeframe GET Classes/UserClasses  Returns paginated user classes list.  Parameters    Name Type Description     userId long  Required. User identifier. Request returns classes data for user identified by userId.   clubId long  Required. Club identifier. Request returns classes that take place in club identified by clubId.   startDate datetime  Required. Start date. Request returns classes that starts leter then startDate.   endDate datetime  Required. End date. Request returns classes that ends earlier then endtDate.   page int Optional. Page number, defaults to 1.     Example request In this example we fetch first 100 of all user (with id = 40) classes in club with id = 2, that starts in december 2015  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/UserClasses ?userId=40 &amp;clubId=2 &amp;startDate=2015-12-01T00:00:00 &amp;endDate=2015-12-31T23:59:59   Example response Status: 200 OK  { \"elements\": [ { \"booked\": true, \"attended\": true, \"userClassRating\": 5, \"userInstructorRating\": 4, \"classType\": { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, \"instructor\": { \"id\": 52, \"timestamp\": 376826, \"firstName\": \"Agatha\", \"lastName\": \"Strickland\", \"displayName\": \"Agatha Strickland\", \"email\": \"a.strickland@cyberbotics.com\", \"sex\": \"Female\", \"rating\": { \"rating\": 4.7, \"votesCount\": 1234, \"rankingSort\": 3.3 }, \"isActive\": true, \"isDeleted\": false }, \"club\": { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, \"id\": 1677, \"timestamp\": 254718, \"isDeleted\": false, \"startDate\": \"2015-12-03T06:15:00\", \"endDate\": \"2015-12-03T07:15:00\", \"attendeesCount\": 7, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] }   List user classes with timestamp GET Classes/UserClasses  Returns paginated user classes list.  Query string parameters    Name Type Description     userId long  Required. User identifier. Request returns classes data for user identified by userId.   clubId long  Required. Club identifier. Request returns classes that take place in club identified by clubId.   timestamp long Timestamp. Request returns classes with timestamp grater then timestamp, defaults to 0.     Example request In this example we fetch list of all user (with id = 40) classes in club with id = 2, with timestamp greater then 254000  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/UserClasses ?userId=40 &amp;clubId=2 &amp;timestamp=254000   Example response Status: 200 OK  { \"elements\": [ { \"booked\": true, \"attended\": true, \"userClassRating\": 5, \"userInstructorRating\": 4, \"classType\": { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, \"instructor\": { \"id\": 52, \"timestamp\": 376826, \"firstName\": \"Agatha\", \"lastName\": \"Strickland\", \"displayName\": \"Agatha Strickland\", \"email\": \"a.strickland@cyberbotics.com\", \"sex\": \"Female\", \"rating\": { \"rating\": 4.7, \"votesCount\": 1234, \"rankingSort\": 3.3 }, \"isActive\": true, \"isDeleted\": false }, \"club\": { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, \"id\": 1677, \"timestamp\": 254718, \"isDeleted\": false, \"startDate\": \"2015-12-03T06:15:00\", \"endDate\": \"2015-12-03T07:15:00\", \"attendeesCount\": 7, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] }   Retrive user class with class identifier GET Classes/UserClass  Returns individual user class.  Parameters    Name Type Description     classId long  Required. Class identifier. Request returns class identified by classId.   userId long  Required. User identifier. Request returns class data for user identified by userId.     Example request In this example we fetch data for class identified with id = 1677 for user identified with id = 40  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/UserClass ?classId=1677 &amp;userId=40   Example response Status: 200 OK  { \"elements\": [ { \"booked\": true, \"attended\": true, \"userClassRating\": 5, \"userInstructorRating\": 4, \"classType\": { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, \"instructor\": { \"id\": 52, \"timestamp\": 376826, \"firstName\": \"Agatha\", \"lastName\": \"Strickland\", \"displayName\": \"Agatha Strickland\", \"email\": \"a.strickland@cyberbotics.com\", \"sex\": \"Female\", \"rating\": { \"rating\": 4.7, \"votesCount\": 1234, \"rankingSort\": 3.3 }, \"isActive\": true, \"isDeleted\": false }, \"club\": { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, \"id\": 1677, \"timestamp\": 254718, \"isDeleted\": false, \"startDate\": \"2015-12-03T06:15:00\", \"endDate\": \"2015-12-03T07:15:00\", \"attendeesCount\": 7, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] } "
  },
  
  
  {
    "title": "Classes",
    
    "url": "/api/classes/",
    "body": " Classes The Classes APIs provides access to class schedule, bookings and ratings.  Classes types  Classes types API gives you read only access to list of classes types available in your gym.  Classes  Classes API gives you read only access to list of fitness classes available in your gym.  User classes  User Classes API gives you read only access to user specyfic list of fitness classes available in your gym. It also a  Booking  Booking API allows to book and cancel fitness classes.  Ratings  Ratings API allows to rate classes and instructors."
  },
  
  
  {
    "title": "Club details",
    
    "url": "/api/clubs/clubdetails/",
    "body": " Club details Club details is detaild representation of single club in your company.   Club details properties  Retrive detailed information about specyfic club.   Club details properties Club details holds the same data as Club plus some detailed features of a club. Only club details specyfic properties are described here.    Name Type Description     displayName string Club display name.   description string Club detailed description.   languageCode string Language identifier club information are translated to (for example EN, DE etc.)   address Address Club address.   longitude decimal Club latitude.   longitude decimal Club longitude.   email string Club e-mail address.   phoneNumber string Club phone number.   equipment array An array of Equipment objects, each representing equipment type available in club.   facilities array An array of Facility objects, each representing facility available in club.   openingHours array An array of Opening hours objects, each representing club opening hours in a given week day.   urls array An array of Url objects, each representing an url to your club's social service site.   contacts array An array of Contact objects, each representing an individual or a departament in your club, user can reach using e-mail or phone.   zones array An array of Zone objects, each representing a distinct area in club.      Retrive detailed information about specyfic club. GET Clubs/Club  Returns detailed club informations.  Parameters    Name Type Description     clubId long  Required. Club identifier.   languageCode string Language identifier club information should be translated to (for example EN, DE etc.).     Example request In this example we fetch club with id = 16 detailed information. Information will be returned in club's language (languageCode parameter is ommited).  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Clubs/Club?clubId=16   Example response Status: 200 OK  { \"elements\": [ { \"displayName\": \"Cyberbotics Berlin\", \"description\": \"Our club began in 1979 and has always been a favorite of different types of athletes and fitness enthusiasts. Refined and updated to offer a setting that is open and light where both staff and clientele are friendly and casual and the focus is on well-balanced health.\", \"languageCode\": \"\", \"latitude\": 52.51038, \"longitude\": 13.39763, \"email\": \"club@cyberbotics.com\", \"phoneNumber\": \"+49 12 123 456 789\", \"address\": { \"line1\": \"Leipziger Str. 46/47\", \"line2\": \"\", \"city\": \"Berlin\", \"postalCode\": \"10-117\", \"country\": \"Germany\" }, \"equipment\": [ { \"id\": 10, \"type\": \"Treadmill\", \"name\": \"Treadmill\", \"quantity\": 10, \"isDeleted\": false }, { \"id\": 11, \"type\": \"StationaryBicycle\", \"name\": \"Stationary bicycle\", \"quantity\": 10, \"isDeleted\": false } ], \"facilities\": [ { \"id\": 7, \"type\": \"WiFi\", \"name\": \"WiFi\", \"isDeleted\": false }, { \"id\": 8, \"type\": \"Coffee\", \"name\": \"Coffee\", \"isDeleted\": false }, { \"id\": 9, \"type\": \"Sunbed\", \"name\": \"Sunbed\", \"isDeleted\": false } ], \"openHours\": [ { \"id\": 11, \"isClosed\": false, \"dayOfWeekOrHoliday\": \"Monday\", \"openFrom\": \"07:00:00\", \"openUntil\": \"23:00:00\", \"isDeleted\": false }, { \"id\": 12, \"isClosed\": false, \"dayOfWeekOrHoliday\": \"Sunday\", \"openFrom\": \"10:00:00\", \"openUntil\": \"18:00:00\", \"isDeleted\": false }, { \"id\": 13, \"isClosed\": false, \"dayOfWeekOrHoliday\": \"Tuesday\", \"openFrom\": \"07:00:00\", \"openUntil\": \"23:00:00\", \"isDeleted\": false }, { \"id\": 14, \"isClosed\": false, \"dayOfWeekOrHoliday\": \"Wednesday\", \"openFrom\": \"07:00:00\", \"openUntil\": \"23:00:00\", \"isDeleted\": false }, { \"id\": 15, \"isClosed\": false, \"dayOfWeekOrHoliday\": \"Thursday\", \"openFrom\": \"07:00:00\", \"openUntil\": \"23:00:00\", \"isDeleted\": false }, { \"id\": 16, \"isClosed\": false, \"dayOfWeekOrHoliday\": \"Friday\", \"openFrom\": \"07:00:00\", \"openUntil\": \"23:00:00\", \"isDeleted\": false }, { \"id\": 17, \"isClosed\": false, \"dayOfWeekOrHoliday\": \"Saturday\", \"openFrom\": \"09:00:00\", \"openUntil\": \"20:00:00\", \"isDeleted\": false } ], \"urls\": [ { \"id\": 3, \"mediaType\": \"Facebook\", \"url\": \"http://facebook.com/Cyberbotics\", \"isDeleted\": false }, { \"id\": 4, \"mediaType\": \"Twitter\", \"url\": \"http://twitter.com/Cyberbotics\", \"isDeleted\": false }, { \"id\": 5, \"mediaType\": \"YouTube\", \"url\": \"http://youtube.com/Cyberbotics\", \"isDeleted\": false }, { \"id\": 6, \"mediaType\": \"Instagram\", \"url\": \"http://instagram.com/Cyberbotics\", \"isDeleted\": false } ], \"contacts\": [ { \"id\": 4, \"title\": \"\", \"name\": \"Support\", \"email\": \"support@club@cyberbotics.com\", \"phoneNumber\": \"+49 12 123 456 789\", \"isDeleted\": false } ], \"zones\": [ { \"id\": 38, \"parentId\": \"\", \"name\": \"Mind &amp; Body\", \"description\": \"Studio Mind &amp; Body\", \"isDeleted\": false }, { \"id\": 39, \"parentId\": \"\", \"name\": \"Spinning\", \"description\": \"Spinning\", \"isDeleted\": false }, { \"id\": 40, \"parentId\": \"\", \"name\": \"Fit &amp; Dance\", \"description\": \"Fit &amp; Dance\", \"isDeleted\": false } ], \"id\": 16, \"timestamp\": 271990, \"name\": \"Cyberbotics Berlin\", \"shortName\": \"Cyberbotics\", \"symbol\": \"CBTCS\", \"type\": \"Normal\", \"isDeleted\": false } ] } "
  },
  
  
  {
    "title": "Clubs",
    
    "url": "/api/clubs/clubs/",
    "body": " Clubs Club is a summary representation of single club in your company.   Club properties List clubs with timestamp    Club properties Class is described by the following properties    Name Type Description     id long Unique identifier of class.   timestamp long Timestamp. Indicates when resource was last modified.   name string Club name.   shortName long Club short name.   symbol long Club symbol.   type long Club type.   isDeleted bool Indicates if resource is deleted.     List clubs with timestamp GET Clubs/Clubs  Returns paginated list of clubs available in your company.  Parameters    Name Type Description     timestamp long Timestamp. Request returns clubs with timestamp grater then timestamp, defaults to 0      Example request In this example we fetch list of all clubs with timestamp greater then 254000  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Clubs/Clubs?timestamp=254000   Example response Status: 200 OK  { \"elements\": [ { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, { \"id\": 9, \"timestamp\": 255968, \"name\": \"Club Monaco\", \"shortName\": \"Monaco\", \"symbol\": \"MON\", \"type\": \"Platinum\", \"isDeleted\": false }, { \"id\": 3, \"timestamp\": 255980, \"name\": \"Club Cracow\", \"shortName\": \"Cracow\", \"symbol\": \"CRA\", \"type\": \"Normal\", \"isDeleted\": false }, { \"id\": 14, \"timestamp\": 256064, \"name\": \"Club Moscow\", \"shortName\": \"Moscow\", \"symbol\": \"\", \"type\": \"Normal\", \"isDeleted\": true } ] } "
  },
  
  
  {
    "title": "Clubs",
    
    "url": "/api/clubs/",
    "body": " Clubs The Clubs APIs provides access to clubs list and club details that are part of your company.  Clubs  Clubs API gives you read only access to list of clubs available in your company.  Club details  Club details API gives you read only access to detailed information about clubs available in your company."
  },
  
  
  {
    "title": "Contract details",
    
    "url": "/api/contracts/contractdetails/",
    "body": " Contract details COntract details is detaild representation of single user contract.   Contract details properties Retrive detailed information about specyfic user contract.   Contract details properties Contract details holds the same data as Contract plus some detailed features of a contract. Only contract details specyfic properties are described here.    Name Type Description     membership Membership Contract's membership.   paymentPlan Payment paln Contract's payment plan.   discounts array An array of discount objects representing discounts applied to contract.     Retrive detailed information about specyfic user contract. GET Contracts/Contract  Returns detailed user contract informations.  Parameters    Name Type Description     contractId long  Required. Contract identifier.     Example request In this example we fetch user contract with id = 10358 detailed information.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Contracts/Contract?contractId=10358   Example response Status: 200 OK  { \"elements\": [ { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2016-01-26T00:00:00\", \"startDate\": \"2016-01-26T00:00:00\", \"cancelDate\": \"\", \"endDate\": \"\", \"membership\": { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false }, \"paymentPlan\": { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false }, \"discounts\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ], \"isActive\": true, \"isDeleted\": false } ] } "
  },
  
  
  {
    "title": "Contracts",
    
    "url": "/api/contracts/contracts/",
    "body": " Contracts Contract is a summary representation of single user contract.   Contract properties List user contracts    Contract properties Contract is described by the following properties    Name Type Description     id long Unique identifier of contract.   timestamp long Timestamp. Indicates when resource was last modified.   signDate string Contract's sign date.   startDate string Contract's start date.   cancelDate string Contract's cancel date.   endDate string Contract's end date.   isActive bool Indicates if contract is marked as active.   isDeleted bool Indicates if resource is deleted.     List user contracts GET Contracts/Contracts  Returns paginated list of user contracts.  Parameters    Name Type Description     userId long  Required. User identifier. Request returns contracts assigned to user identified by userId.     Example request In this example we fetch list of contracts assigned to user identified with id = 236  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Contracts/Contracts?userId=236   Example response Status: 200 OK  { \"elements\": [ { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2016-01-26T00:00:00\", \"startDate\": \"2016-01-26T00:00:00\", \"cancelDate\": \"\", \"endDate\": \"\", \"isActive\": true, \"isDeleted\": false } ] } "
  },
  
  
  {
    "title": "Contracts",
    
    "url": "/api/contracts/",
    "body": " Contracts The Contracts APIs provides access to user contracts list and contract details.  Contracts  Contracts API gives you read only access to list of user contracts.  Contract details  Contract details API gives you read only access to detailed information about user contract."
  },
  
  
  {
    "title": "Instructors",
    
    "url": "/api/instructors/instructors/",
    "body": " Instructors Instructor is a summary representation of a fitness class instructor.   Instructor properties List instructors with timestamp    Instructor properties Instructor is described by the following properties    Name Type Description     id long Unique identifier of instructor.   timestamp long Timestamp. Indicates when resource was last modified.   firstName string Instructor's name.   lastName string Instructor's last name.   displayName string Instructor's display name.   email string Instructor's email.   sex string Instructor's sex. Possible values:  Male Female     rating Rating Instructor's rating.   isActive bool Indicates if instructor is active.   isDeleted bool Indicates if resource is deleted.     List instructors with timestamp GET Instructors/Instructors  Returns paginated list of instructors available in your company.  Parameters    Name Type Description     timestamp long Timestamp. Request returns instructors with timestamp grater then timestamp, defaults to 0      Example request In this example we fetch list of all instructors with timestamp greater then 254000  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Instructors/Instructors?timestamp=254000   Example response Status: 200 OK  { \"elements\": { \"id\": 52, \"timestamp\": 376826, \"firstName\": \"Agatha\", \"lastName\": \"Strickland\", \"displayName\": \"Agatha Strickland\", \"email\": \"a.strickland@cyberbotics.com\", \"sex\": \"Female\", \"rating\": { \"rating\": 4.7, \"votesCount\": 1234, \"rankingSort\": 3.3 }, \"isActive\": true, \"isDeleted\": false } } "
  },
  
  
  {
    "title": "Instructors",
    
    "url": "/api/instructors/",
    "body": " Instructors The Instructors APIs provides access to instructors list available in your company.  Instructors  Instructors API gives you read only access to list of instructors available in your company."
  },
  
  
  {
    "title": "Membership details",
    
    "url": "/api/memberships/membershipdetails/",
    "body": " Membership details Membership details is detaild representation of single membership type in your company.   Membership details properties Retrive detailed information about specyfic membership type.   Membership details properties Club details holds the same data as Membership plus some detailed attributes of a membership. Only membership details specyfic properties are described here.    Name Type Description     startDate string Club display name.   endDate string Club detailed description.   accessRules array An array of Access rules objects, each representing club access rules for membership holder.   allowedZoneTypes array An array of Club Zone Types objects, each representing club zone type membership holder has access to.   paymentPlans array An array of Payment Plans objects, each representing payment plan available with given membership type.     Retrive detailed information about specyfic membership type. GET Memberships/Membership  Returns detailed membership type informations.  Parameters    Name Type Description     membershipId long Membership type identifier.     Example request In this example we fetch membership type with id = 20 detailed information.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Memberships/Membership ?membershipId=20   Example response Status: 200 OK  { \"elemenst\": [ { \"startDate\": \"2015-01-01T00:00:00\", \"endDate\": \"2016-12-31T23:59:59\", \"accessRules\": [ { \"id\": 18, \"timestamp\": 280591, \"name\": \"Access rule\", \"description\": \"\", \"allowedClubs\": [ { \"id\": 2, \"timestamp\": 271990, \"name\": \"Fibo Cyberbotics\", \"shortName\": \"Cyberbotics\", \"symbol\": \"FCBR\", \"type\": \"Normal\", \"isDeleted\": false }, { \"id\": 9, \"timestamp\": 255968, \"name\": \"Club Monaco\", \"shortName\": \"Monaco\", \"symbol\": \"MON\", \"type\": \"Platinum\", \"isDeleted\": false } ], \"allowedZoneTypes\": [ { \"id\": 1, \"timestamp\": 50009, \"name\": \"SPA\", \"description\": \"SPA\", \"dailyLimit\": \"\" }, { \"id\": 2, \"timestamp\": 2009, \"name\": \"Gym\", \"description\": \"Gym\", \"dailyLimit\": \"\" }, { \"id\": 4, \"timestamp\": 2011, \"name\": \"Cafeteria\", \"description\": \"Cafeteria\", \"dailyLimit\": \"\" } ] } ], \"paymentPlans\": [ { \"id\": 41, \"timestamp\": 447620, \"name\": \"Open 3m\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 42, \"timestamp\": 447621, \"name\": \"Open 6m\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 43, \"timestamp\": 447622, \"name\": \"Open 12m\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false } ], \"id\": 20, \"timestamp\": 280599, \"name\": \"High5 Full\", \"isActive\": true, \"isDeleted\": false } ] } "
  },
  
  
  {
    "title": "Memberships",
    
    "url": "/api/memberships/memberships/",
    "body": " Memberships Each user to complete club joining process must select membership type. Membership type states which clubs user can access in which hours and club zones that can be used by the user. Membership is a summary representation of single membership type in your company.   Membership properties List memberships with timestamp List memberships available in a given club    Membership properties Membership is described by the following properties    Name Type Description     id long Unique identifier of membership.   timestamp long Timestamp. Indicates when resource was last modified.   name string Membership's name.   isActive bool Indicates if membership is marked as active.   isDeleted bool Indicates if resource is deleted.     List memberships with timestamp GET Memberships/Memberships  Returns paginated membership list.  Parameters    Name Type Description     timestamp long Timestamp. Request returns memberships with timestamp grater then timestamp, defaults to 0.     Example request In this example we fetch list of all memberships (timestamp parameter defaults to 0) available in a company.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Memberships/Memberships?timestamp=0   Example response Status: 200 OK  { \"elemenst\": [ { \"id\": 6, \"timestamp\": 167179, \"name\": \"Weekend\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 2, \"timestamp\": 167181, \"name\": \"Lunch\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 9, \"timestamp\": 188113, \"name\": \"Early Bird \", \"isActive\": true, \"isDeleted\": false }, { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false } ] }   List memberships available in a given club GET Memberships/Memberships  Returns paginated memberships list available in given club.  Parameters    Name Type Description     clubId long  Required. Club identifier.   page int Page number, defaults to 1.     Example request In this example we fetch list of all memberships available in club identified with clubId = 16.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Memberships/Memberships?clubId=16   Example response Status: 200 OK  { \"elemenst\": [ { \"id\": 9, \"timestamp\": 188113, \"name\": \"Early Bird \", \"isActive\": true, \"isDeleted\": false }, { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false } ] } "
  },
  
  
  {
    "title": "Memberships",
    
    "url": "/api/memberships/",
    "body": " Memberships The Membership APIs provides access to membership types.  Memberships  Membership API gives you read only access to list of membership types available in your gym.  Membership details  Membership details API gives you read only access to detailed information about mambership types available in your gym."
  },
  
  
  {
    "title": "Cities",
    
    "url": "/api/miscellaneous/cities/",
    "body": " Cities   City properties List cities with given name    City properties Country is described by the following properties    Name Type Description     id long Unique identifier of city.   name string City name.   country Country Contry city is located in.     List cities with given name GET Geo/Cities  Returns paginated cities list, in country identified by countryId.  Parameters    Name Type Description     countryId long  Required. Country identifier.   name string City name. Request returns cities with name containing name parameter value.   page int Page number, defaults to 1.     Example request In this example we fetch list of all polish cities that name contains Warszawa string.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Geo/Cities ?countryId=187 &amp;name=Warszawa   Example response Status: 200 OK  { \"elements\": [ { \"id\": 1695965, \"name\": \"Bukowno Warszawa\", \"country\": { \"id\": 187, \"symbol\": \"PL\", \"name\": \"Poland\", \"nativeName\": \"Polska\" } }, { \"id\": 1722157, \"name\": \"Warszawa\", \"country\": { \"id\": 187, \"symbol\": \"PL\", \"name\": \"Poland\", \"nativeName\": \"Polska\" } } ] } "
  },
  
  
  {
    "title": "Countries",
    
    "url": "/api/miscellaneous/countries/",
    "body": " Countries   Country properties List countries with given name    Country properties Country is described by the following properties    Name Type Description     id long Unique identifier of country.   symbol string Country symbol.   name string Country name.   nativeName string Country name in native language.     List countries with given name GET Geo/Countries  Returns paginated countries list.  Parameters    Name Type Description     name string Country name. Request returns countries with with name containing name parameter value.   page int Page number, defaults to 1.     Example request In this example we fetch list of all countries that name contains pol string.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Geo/Countries?name=pol   Example response Status: 200 OK  { \"elements\": [ { \"id\": 187, \"symbol\": \"PL\", \"name\": \"Poland\", \"nativeName\": \"Polska\" } ] } "
  },
  
  
  {
    "title": "Miscellaneous",
    
    "url": "/api/miscellaneous/",
    "body": " Miscellaneous The Miscellaneous APIs provides access to different data useful in developing applications powerd by Perfect Gym.  Cities  Cities API gives you read only access to global cities list.  Countries  Countries API gives you read only access to global countries list."
  },
  
  
  {
    "title": "Authentication",
    
    "url": "/api/overview/authentication/",
    "body": " Authentication PerfectGym API uses token-based authentification as an authentification protocol. Requests that require authentication will return 401 Unauthorized if no valid token is provided.    Prerequisites Authentication flow    Prerequisites Before accessing API, you need a special API user in your Perfect Gym instalation. Please contact Perfect Gym and we will provide you user name and password used to authenticate your app with PerfectGYm API  Authentication flow  1. Request access token POST https://yoursubdomain.perfectgym.com/api/oauth/authorize   Body parameters    Name Type Description     username string  Required. User name you received from PerfectGym, see prerequisites.   password string  Required. User password you received from PerfectGym, see prerequisites.   grant_type string  Required. This has to be explicitly set to password.    Authentication parameters must be encoded using application/x-www-form-urlencoded content type.  Request example  curl -i -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"password=yourpassword &amp;username=yourusername &amp;grant_type=password\" https://yoursubdomain.perfectgym.com/api/oauth/authorize   Response Status: 200 OK  { \"access_token\": \"abcdefgh12345678\", \"token_type\": \"bearer\", \"expires_in\": 7775999 }  Token expiration time is presented in seconds.  2. Use the access token to access the API The access token allows you to make authenticated requests to the API. You can pass the token by including it in the Authorization header. Authorization: bearer OAUTH-TOKEN  Authorization header should be included in all subsequent API requests.  Authenticated request example  curl -i -H \"Authorization: Bearer abcdefgh12345678\" https://yoursubdomain.perfectgym.com/api/Classes/Classes/1 "
  },
  
  
  {
    "title": "Pagination",
    
    "url": "/api/overview/pagination/",
    "body": " Pagination PerfectGym API endpoint that returns list of resources usualy use pagination.   Overview  Pagination using timestamp query string parameter  Pagination using page query string parameter   Overview For pagination API uses two distinct techniques:   timestamp query string parameter   page query string parameter  Page numbering is 1-based, page size is 100. Each API endpoint that returns paginated result is marked as paginated in endpoint description. Selected pagination method is described alongside endpoint parameters description.   Pagination using timestamp query string parameter Requests with timestamp query string parameter return list of resources added or changed after point in time represented by timestamp value. Result is ordered by timestamp ascending and is paged with page size of 100. To get next page, use last element's timestamp in subsequent request.  To get all elements iterate with timestamp parameter untill you get result with less then 100 elements.  Example In this example we fetch list of available in club with id = 2 classes. (Several element properties in JSON response were ommited for clarity) First page, timestamp parameter is equal 0. It means that we fetch all elements, regardless of time they were last modified.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/Classes ?clubId=2 &amp;timestamp=0  Status: 200 OK  { \"elements\": [ { \"Elements omitted for clarity\": \"...\" }, { \"id\": 1677, \"timestamp\": 254718, \"isDeleted\": false, \"startDate\": \"2015-12-03T06:15:00\", \"endDate\": \"2015-12-03T07:15:00\", \"attendeesCount\": 7, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] }  Second page, timestamp parameter of value 254718 is provided. It means that we fetch all elements with timestamp greater then 254718 (value of last element's timestamp` in previous request).  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/Classes ?clubId=2 &amp;timestamp=254718  Status: 200 OK  { \"elements\": [ { \"id\": 2345, \"timestamp\": 366718, \"isDeleted\": false, \"startDate\": \"2015-12-28T08:00:00\", \"endDate\": \"2015-12-28T09:00:00\", \"attendeesCount\": 0, \"attendeesLimit\": 20, \"clubZone\": \"Fitness\" } ] }    Pagination using page query string parameter We use page query string parameter to choose a page. page parameter is always optional. The default page is the first one, so if you ommit page parameter, API will return first page. To get all elements iterate with page parameter untill you get result with less then 100 elements.  Example In this example we fetch list of available in club with id = 2 classes, that starts in december 2015. First page (page parameter is ommited, so it defaults to 1)  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/Classes ?clubId=2 &amp;startDate=2015-12-01T00:00:00 &amp;endDate=2015-12-31T23:59:59  Second page (page parameter of value 2 is provided)  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Classes/Classes/ ?clubId=2 &amp;startDate=2015-12-01T00:00:00 &amp;endDate=2015-12-31T23:59:59 &amp;page=2 "
  },
  
  
  {
    "title": "Requests",
    
    "url": "/api/overview/requests/",
    "body": " Requests This describes PerfectGym API requests basics.  Request parameters Filter and pagination parameters Timestamp parameter   Request parameters You provide parameters to PerfectGym API with query string and body parameters. The format for query string parameters is the full resource URL followed by a question mark, and the parameters.   For GET requests you provide parameters in a query string you append to your request's URL For POST requests you provide parameters in query string or as JSON in request's body (with Content-Type of 'application-json' header) when explicitly required.  Available query string and body parameters are described for each API endpoint.  Example In this example, we fetch club (with id = 16) details. We request that returned data be in EN language. For detailed request description have a look here. GET Clubs/Club   curl -i https://yourcompany.perfectgym.com/api/Clubs/Club?clubId=16  Let's break down this request:   https://yourcompany.perfectgym.com/api/ is a base url for PerfectGym API  Clubs/Club - resource path  ?clubId- clubId parameter that uniquly identifies resource you want to work with.  You can read it like so: from all clubs, select club with identifier of value 16  Filter and pagination parameters We use query string parameters for filtering and pagination in the PerfectGym API. Available query string parameters are described for each API endpoint.  Example In this example, we retrive classes availeble in club identified by id of value 1, that take place between 2016-01-01 and 2016-01-31 GET Classes/Classes   curl -i https://yourcompany.perfectgym.com/api/Classes/Classes ?clubId=1 &amp;startDate=2016-01-01T00:00:00 &amp;endDate=2016-01-31T23:59:59  For details about pagination with page parameter go to Pagination with query string parameters  Timestamp parameter Requests with timestamp parameter returns list of resources added or changed after point in time represented by timestamp value. Result is ordered by timestamp ascending. This let's you fetch only resources that changed since your last api call.  Example In this example we fetch list of classes from the club with id of 1 and with timestamp value greater then 654321. GET Classes/Classes   curl -i https://yourcompany.perfectgym.com/api/Classes/Classes ?clubId=1 &amp;timestamp=654321  For details about pagination with timestamp parameter go to Pagination using timestamp"
  },
  
  
  {
    "title": "Responses",
    
    "url": "/api/overview/responses/",
    "body": " Responses This describes PerfectGym API responses basics.  Overview Response Envelope Error Response Envelope Summary Representations Detailed Representations   Overview Responses contains resources list or individual resources for GET requests. For POST requests, individual resource that request operates on is returned.  Each API response is wrapped in a standard structure called the envelope, which holds the results of the API call, plus the metadata related to the request. In case of logical errors, error detailes are enclosed in error envelope.  Response Envelope Response envelope encloses resources list or individual resources returned by PerfectGym API.  Response envelope properties    Attribute Name Description     elements A collection of objects the payload carries. In case of individual resource, elements contain only one object.     Example Status: 200 OK  { \"elements\": [ { \"id\": 1, \"timestamp\": 263952, \"name\": \"Box\", \"description\": \"Box perfectly combines cardio and strength training under the guise of groove!\", \"rating\": { \"rating\": 4.1, \"votesCount\": 1234, \"rankingSort\": 2.3 } }, { \"id\": 2, \"timestamp\": 382653, \"name\": \"POWER JOGA\", \"description\": \"Power Yoga is definitely an intense workout that will make you sweat.\", \"rating\": { \"rating\": 4.1, \"votesCount\": 4321, \"rankingSort\": 4.3 } } ] }   Error Response Envelope Error response envelope encloses information about logical errors that occured during API calls. Error responses come with HTTP 400 status code.  Error envelope properties    Attribute Name Description     errors An array of Error objects, each representing logical error that occured during API call.     Example Status: 400 Bad Request  { \"errors\": [ { \"code\": \"ClassAlreadyBooked\", \"property\": \"\", \"message\": \"\" } ] }   Summary Representations When you fetch a list of resources, the response includes a subset of the attributes for that resource. This is the \"summary\" representation of the resource. (Some attributes are computationally expensive for the API to provide. For performance reasons, the summary representation excludes those attributes. To obtain those attributes, fetch the \"detailed\" representation.)  Example When you get a list of classes, you get the summary representation of each class type. Here, we fetch the list of classes in a given club: GET Classes/Classes/{clubId}   Detailed Representations When you fetch an individual resource, the response typically includes all attributes for that resource. This is the \"detailed\" representation of the resource.  Example When you get an individual class, you get the detailed representation of the class: GET Classes/Class/{classId}  The documentation provides an example response for each API method. The example response illustrates all attributes that are returned by that method."
  },
  
  
  {
    "title": "Versions",
    
    "url": "/api/overview/versions/",
    "body": " Versions The API is currently in early alpha version and is in constant development. Please expect breaking changes."
  },
  
  
  {
    "title": "Discounts",
    
    "url": "/api/paymentplans/discounts/",
    "body": " Discounts Each user to complete club joining process must select membarship type and accompanying payment plan. User may also be eligible for discount. Discounts are applied to payment plan fees and may be limited to:  Employee role Payment method  Discount is a summary representation of single discount in your company.   Discount properties List available discounts for a given payment plan Retrive discounted fees for given payment plan    Discount properties Payment plan is described by the following properties    Name Type Description     id long Unique identifier of discount.   isActive bool Indicates if discount is marked as active.   name string Discount name.   administartionFeeDiscountType string Administration fee discount type. Possible unit values :   PercentDiscount - discount by percentage  ValueDiscount - discount by value  FixedValueDiscount - fixed value  None - no discount  Unknown - unknown discount type     joiningFeeDiscountType string Joining fee discount type. Possible unit values :   PercentDiscount - discount by percentage  ValueDiscount - discount by value  FixedValueDiscount - fixed value  None - no discount  Unknown - unknown discount type     membershipFeeDiscountType string Membership fee discount type. Possible unit values :   PercentDiscount - discount by percentage  ValueDiscount - discount by value  FixedValueDiscount - fixed value  None - no discount  Unknown - unknown discount type     administartionFeeDiscountValue string Administration fee discount value.   joiningFeeDiscountValue string Joining fee discount value.   membershipFeeDiscountValue string Membership fee discount value.     List available discounts for a given payment plan GET Discounts/Discounts  Returns paginated discounts list available for a given payment plan.  Parameters    Name Type Description     paymentPlanId long  Required. Payment plan identifier.   clubId long  Required. Club id. Request returns discounts available in club identified by clubId.   date datetime Request returns discounts available in a given day. Defaults to now.   page int Page number, defaults to 1.     Example request In this example we fetch list of discounts available for payment plan with paymentPlanId = 39 and for club with clubId = 16. All discounts are available for today (no date parameter provided)  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Discounts/Discounts ?paymentPlanId=39 &amp;clubId=16   Example response Status: 200 OK  { \"elements\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ] }   Retrive discounted fees for given payment plan GET Discounts/DiscountedFees  Returns discounted fees for given payment plan.  Parameters    Name Type Description     paymentPlanId long  Required. Payment plan identifier.   discountIds array  Required. An array of discounts idenifiers to applay. Request returns payment plan fees with cumulative discounts identified with discountIds applied.   date datetime Request returns discounts available in a given day. Defaults to now.     Example request In this example we fetch payment plan fees with discount with id = 10 applied.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Discounts/DiscountedFees ?paymentPlanId=39 &amp;discountIds=10   Example response Status: 200 OK  { \"elements\": [ { \"joiningFee\": { \"net\": 0, \"tax\": 0, \"taxRate\": 23, \"gross\": 0 }, \"administarationFee\": { \"net\": 15.45, \"tax\": 3.55, \"taxRate\": 23, \"gross\": 19 }, \"membershipFee\": { \"net\": 8.09, \"tax\": 1.86, \"taxRate\": 23, \"gross\": 9.95 }, \"freezFee\": { \"net\": 0, \"tax\": 0, \"taxRate\": 23, \"gross\": 0 } } ] } "
  },
  
  
  {
    "title": "Payment plan details",
    
    "url": "/api/paymentplans/paymentplandetails/",
    "body": " Payment plan details Payment plan details is detaild representation of single payment plan in your company.   Payment plan details properties Retrive detailed information about specyfic payment plan.   Payment plan details properties Payment plan holds the same data as Payment plan plus some detailed attributes of a payment plan. Only payment plan details specyfic properties are described here.    Name Type Description     startDate string Payment plan start date.   endDate string Payment plan end date.   minimumAge int Minimum age for club member to be able to purchase selected payment plan.   freezeAllowed bool  true if membership with a given payment plan can be freezed, false otherwise.   paymentOnStartDate bool  true if first payment must be executed on paymentplan startDate, false otherwise.   displayName string Payment plan display name.   shortDescription string Payment plan short description.   description string Payment plan description.   commitmentPeriod string Minimum commitment period represented as {value}{unit}. Possible unit values :   M - month  D - day  Example:   12M - twelve months  60D - sixty days     fees Fees Contract fees.   paymentInterval string Payment interval represented as {value}{unit}. Possible unit values :   M - month  D - day  Example:   1M - monthly payment  7D - weekly payment .   membership Membership Payment plan membership.   channels array An array of string objects, each representing a channel given payment plan is available in. Possible values :  Web Internet Intranet MembershipPortal CorporatePortal KIOSK       Retrive detailed information about specyfic payment plan. GET Memberships/PaymentPlan  Returns detailed payment plan information.  Parameters    Name Type Description     paymentPlanId long  Required. Payment plan identifier.   languageCode string Language identifier payment plan display name, short description and description should be translated to (for example EN, DE etc.)..     Example request In this example we fetch payment plan with id = 44 detailed information.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Memberships/PaymentPlan ?paymentPlanId=40   Example response Status: 200 OK  { \"elements\": [ { \"startDate\": \"2015-01-01T00:00:00\", \"endDate\": \"2016-12-31T00:00:00\", \"freezeAllowed\": true, \"paymentOnStartDate\": false, \"displayName\": \"Open 24 months\", \"shortDescription\": \"\", \"description\": \"\", \"commitmentPeriod\": \"24M\", \"fees\": { \"joiningFee\": { \"net\": 0, \"tax\": 0, \"taxRate\": 23, \"gross\": 0 }, \"administartionFee\": { \"net\": 15.45, \"tax\": 3.55, \"taxRate\": 23, \"gross\": 19 }, \"membershipFee\": { \"net\": 16.18, \"tax\": 3.72, \"taxRate\": 23, \"gross\": 19.9 }, \"freezFee\": { \"net\": 0, \"tax\": 0, \"taxRate\": 23, \"gross\": 0 } }, \"paymentInterval\": \"1M\", \"membership\": { \"id\": 20, \"timestamp\": 280599, \"name\": \"High5 Full\", \"isActive\": true, \"isDeleted\": false }, \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false } ] } "
  },
  
  
  {
    "title": "Payment plans",
    
    "url": "/api/paymentplans/paymentplans/",
    "body": " Payment plans Payment plan represents information about membership fees and payment schedule. Each user to complete club joining process must select membarship type and accompanying payment plan. Each payment plan is asigned to exactly one membership type. Payment plan may be limited to:  Employee role Clubs  Payment plan is a summary representation of single payment plan in your company.   Payment plan properties List payment plan with timestamp List payment plans available in a given club    Payment plan properties Payment plan is described by the following properties    Name Type Description     id long Unique identifier of payment plan.   timestamp long Timestamp. Indicates when resource was last modified.   name string payment plan name.   isActive bool Indicates if payment plan is marked as active.   isDeleted bool Indicates if resource is deleted.     List payment plan with timestamp GET PaymentPlans/PaymentPlans  Returns paginated payment plans list.  Parameters    Name Type Description     timestamp long Timestamp. Request returns payment plans with timestamp grater then timestamp, defaults to 0.     Example request In this example we fetch list of all payment plans (timestamp parameter defaults to 0) available in a company.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/PaymentPlans/PaymentPlans?timestamp=0   Example response Status: 200 OK  { \"elements\": [ { \"id\": 41, \"timestamp\": 447620, \"name\": \"Open 3m\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 42, \"timestamp\": 447621, \"name\": \"Open 6m\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 43, \"timestamp\": 447622, \"name\": \"Open 12m\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false } ] }   List payment plans available in a given club GET PaymentPlans/PaymentPlans  Returns paginated payment plans list available in given club.  Parameters    Name Type Description     clubId long  Required. Club identifier.   channel string Payment plan channel. Request will return only payment plans that are available via given channel.   page int Page number, defaults to 1.     Example request In this example we fetch list of all payment plans available in club identified with clubId = 16.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/PaymentPlans/PaymentPlans ?clubId=16   Example response Status: 200 OK  { \"elements\": [ { \"id\": 41, \"timestamp\": 447620, \"name\": \"Open 3m\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 42, \"timestamp\": 447621, \"name\": \"Open 6m\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 43, \"timestamp\": 447622, \"name\": \"Open 12m\", \"isActive\": true, \"isDeleted\": false }, { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false } ] } "
  },
  
  
  {
    "title": "Payment plans",
    
    "url": "/api/paymentplans/",
    "body": " Payment plans The Payment plans APIs provides access to payment plans and discounts.  Payment plans  Payment plans API gives you read only access to list of payment plans available in your gym.  Payment plan details  Payment plans details API gives you read only access to detailed information about payment plans available in your gym.  Discounts  Discounts API gives you read only access to detailed information about discounts available in your gym."
  },
  
  
  {
    "title": "Pending contract fees",
    
    "url": "/api/payments/contractfees/",
    "body": " Pending contract fees Pending contract fee is a summary representation of a fee to be paid by a user.   Pending contract fee properties List user pending contract fees    Pending contract fee properties Pending contract fee is described by the following properties    Name Type Description     id long Unique identifier of pending fee.   timestamp long Timestamp. Indicates when resource was last modified.   name string Pending fee name.   description string Pending fee description.   feeType string Pending fee type. Possible values:  Prorata AdminFee JoiningFee Prepaid Membership Freeze Manual Other     fee Fee Fee to be paid.   dueDate string Fee due date   isDeleted bool Indicates if resource is deleted.     List user pending contract fees GET Payments/ContractFees  Returns paginated list of conract fees to be paid by a given user.  Parameters    Name Type Description     userId long  Required. User identifier.     Example request In this example we fetch list of pending contract fees of user identified with id = 236  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Payments/ContractFees?userId=236   Example response Status: 200 OK  { \"elements\": [ { \"name\": \"\", \"description\": \"Basic 6m 50% Admin fee\", \"paymentType\": \"AdminFee\", \"amount\": { \"net\": -15.45, \"tax\": -3.55, \"taxRate\": 23, \"gross\": -19 }, \"dueDate\": \"2016-01-26T00:00:00\", \"id\": 3890, \"timestamp\": 448449, \"isDeleted\": false }, { \"name\": \"\", \"description\": \"Basic 6m Prorata, 6 days\", \"paymentType\": \"Prorata\", \"amount\": { \"net\": -3.13, \"tax\": -0.72, \"taxRate\": 23, \"gross\": -3.85 }, \"dueDate\": \"2016-01-26T00:00:00\", \"id\": 3889, \"timestamp\": 448447, \"isDeleted\": false }, { \"name\": \"\", \"description\": \"Basic w 2016-02 (discount 9,95 - 50%)\", \"paymentType\": \"Membership\", \"amount\": { \"net\": -8.09, \"tax\": -1.86, \"taxRate\": 23, \"gross\": -9.95 }, \"dueDate\": \"2016-02-02T00:00:00\", \"id\": 3891, \"timestamp\": 448451, \"isDeleted\": false } ] } "
  },
  
  
  {
    "title": "Payments",
    
    "url": "/api/payments/payments/",
    "body": " Payments This API allows user to pay contract fees using online payment systems.  Execute online payment Execute payment with credit card   Execute online payment GET Payments/Pay  Returns online payment URL and transaction identifier.  Parameters    Name Type Description     userId long  Required. User identifier.   amount decimal  Required. Amount to be paid. After successful payment amount is automaticly distributet to satisfy earliest pending fees first.   redirectUrl string URL with query paymentId parameter attached. Online payment system will redirect to a given url after transaction is completed.     Response Payment details including payment URL user should be redirected to, to proceed with a payment.  Example request In this example we request payment URL, user can execute payment with.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Payments/Pay ?userId=236 &amp;amount=100   Example response Status: 200 OK  { \"elements\": [ { \"paymentUrl\": \"http://yourcompany.perfectgym.com/example_payment_url\", \"paymentId\": \"PGAPI_a12b55c5-d526-4e4e-ae9c\" } ] }   Execute payment with credit card POST Payments/PayWithCreditCard  Request executes payment with user credit card. Credit card details must be assigned using CreditCard request.  Body parameters    Name Type Description     userId long  Required. User identifier.   feeIds array  Required. An array of long values, each representing fee identifier to be paid.   totalAmmount decimal  Required. Total amount to be paid (must be equal to sum of all fees).     Response Payment status if operation is successful, or collection of errors with credit card payment error codes otherwise.  Example request In this example we request payment of pending contract fees for user identified with id = 236.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"userId\": 236, \"feeIds\": [3889, 3890, 3891], \"totalAmount\": 32.8 }' http://yoursubdomain.perfectgym.com/api/Payments/PayWithCreditCard   Example response Status: 200 OK  { \"elements\": [ { \"status\": \"Success\", \"errorMessage\": \"\" } ] }   Example error response Total amount is not equal to sum of all fees to be paid. Status: 400 Bad Request  { \"errors\": [ { \"code\": \"InvalidTotalAmount\", \"property\": \"\", \"message\": \"\" } ] } "
  },
  
  
  {
    "title": "Payment status",
    
    "url": "/api/payments/paymentstatus/",
    "body": " Payment status Payment status represents status of payment executed via online payment system.   Payment status properties Retrive payment status    Payment status properties Payment status is described by the following properties    Name Type Description     status string Payment status. Possible values:  Success InProgress Error     errorMessage string Error message in case status = Error.     Retrive payment status GET Payments/PaymentStatus  Returns status for online payment identified with paymentId.  Parameters    Name Type Description     paymentId string Payment identifier returned by payment method in payment details      Example request In this example we fetch payment status for payment identified with paymentId = PGAPI_a12b55c5-d526-4e4e-ae9c  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Payments/PaymentStatus ?paymentId=PGAPI_a12b55c5-d526-4e4e-ae9c   Example response Status: 200 OK  { \"elements\": [ { \"status\": \"Success\", \"errorMessage\": \"\" } ] } "
  },
  
  
  {
    "title": "Payments",
    
    "url": "/api/payments/",
    "body": " Payments The Payments APIs provides access to contract payments list and allows user to execute payments using online payments.  Pending contract fees  Pending contract fees API gives you read only access to list of due and future contract fees to be paid by the user.  Payments  Payments API allows you to pay contract fees using online payment systems."
  },
  
  
  {
    "title": "Adding and updateing user",
    
    "url": "/api/users/addupdateuser/",
    "body": " Adding and updating users This API allow to add new users and update existing user's data.  Add new user Update existing user   Add new user POST Users/User  Request creates new user and adds it to your company user's list.  Body parameters    Name Type Description     personalId string  Must be unique. User personal identifier.   firstName string User first name.   lastName string User last name.   email string  Must be unique. User email address.   phone string  Must be unique. User phone number.   idCardName string User identity card name.   idCardNumber string User identity card number.   legalGuardian string User legal guardian full name.   birthDate string User birth date.   isForeigner bool Indicates if user is a forigner.   sex string User sex. Possible values:  Male Female     address Address User address.   homeClubId long User home club identifier.     Response User details if operation is successful, or collection of errors with add user error codes otherwise.  Example request In this example we add new user with some sample data to the company user's list.  curl -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"homeClubId\": 12, \"address\": { \"line1\": \"al. Jerozolimskie 114\", \"line2\": \"\", \"city\": \"Warszawa\", \"postalCode\": \"20-259\", \"country\": \"Poland\" } }' http://yoursubdomain.perfectgym.com/api/Users/User   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 447937, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": false, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"20-259\", \"line1\": \"al. Jerozolimskie 114\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"\", \"ownerName\": \"\", \"street\": \"\", \"cityAndPostalCode\": \"\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": \"\" } ] }   Example error response Subsequent user add request with same samlpe data generates following error: Status: 400 Bad Request  { \"errors\": [ { \"code\": \"UserAlreadyExist\", \"property\": \"Email\", \"message\": \"\" } ] }   Update existing user PUT Users/User  Request updates existing user's data.  Parameters    Name Type Description     userId long User's identifier.     Body parameters    Name Type Description     personalId string  Must be unique. User personal identifier.   firstName string User first name.   lastName string User last name.   email string  Must be unique. User email address.   phone string  Must be unique. User phone number.   idCardName string User identity card name.   idCardNumber string User identity card number.   legalGuardian string User legal guardian full name.   birthDate string User birth date.   isForigner bool Indicates if user is a forigner.   sex string User sex. Possible values:  Male Female     address Address User address.     Response User details if operation is successful, or collection of errors with update user error codes otherwise.  Example request In this example we update user's address.  curl -X PUT -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"homeClubId\": 12, \"address\": { \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"country\": \"Poland\" } }' http://yoursubdomain.perfectgym.com/api/Users/User?userId=236   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 448035, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": false, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"\", \"ownerName\": \"\", \"street\": \"\", \"cityAndPostalCode\": \"\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": \"\" } ] }   Example error response User update request with non existant user identifier Status: 400 Bad Request  { \"errors\": [ { \"code\": \"UserDoesNotExists\", \"property\": \"\", \"message\": \"\" } ] } "
  },
  
  
  {
    "title": "Password updating and validation",
    
    "url": "/api/users/passwordupdatingandvalidation/",
    "body": " Password updating and validation This API lest you update user password and validate credentials. User can use it's username and password to login to varions client web and mobile apps, including:  KIOSK web app Client Portal web app Perfect Gym Go mobile app   Update user password Validate user credentials   Update user password POST Users/Password  Request updates user password.  Parameters    Name Type Description     userId long  Required. User identifier.     Body parameters    Name Type Description     password string User password.     Response User details.  Example request In this example we update user's password.  curl -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"password\": \"new_password\", }' http://yoursubdomain.perfectgym.com/api/Users/Password?userId=236   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 448035, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"http://yoursubdomain.perfectgym.com/Api/Files/File?fileId=78\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": true, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"61 1090 1014 0000 0712 1981 2874\", \"ownerName\": \"John Fibo\", \"street\": \"Przyczółkowa 334\", \"cityAndPostalCode\": \"02-962 Warszawa\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2016-01-26T00:00:00\", \"startDate\": \"2016-01-26T00:00:00\", \"cancelDate\": \"\", \"endDate\": \"\", \"membership\": { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false }, \"paymentPlan\": { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false }, \"discounts\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ], \"isActive\": true, \"isDeleted\": false } } ] }   Validate user credentials POST Users/ValidateCredentials  Request checks if user's name and password are valid.  Body parameters    Name Type Description     userName string User name.   password string User password.     Response User details if operation is successful, or collection of errors with validate credentials error codes otherwise.  Example request In this example we update user's password.  curl -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"userName\": \"john.fibo@perfectgym.pl\", \"password\": \"new_password\", }' http://yoursubdomain.perfectgym.com/api/Users/ValidateCredentials   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 448035, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"http://yoursubdomain.perfectgym.com/Api/Files/File?fileId=78\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": true, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"61 1090 1014 0000 0712 1981 2874\", \"ownerName\": \"John Fibo\", \"street\": \"Przyczółkowa 334\", \"cityAndPostalCode\": \"02-962 Warszawa\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2016-01-26T00:00:00\", \"startDate\": \"2016-01-26T00:00:00\", \"cancelDate\": \"\", \"endDate\": \"\", \"membership\": { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false }, \"paymentPlan\": { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false }, \"discounts\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ], \"isActive\": true, \"isDeleted\": false } } ] }   Example error response Invalid user credentials generates following response: Status: 400 Bad Request  { \"errors\": [ { \"code\": \"InvalidUserNameOrPassword\", \"property\": \"\", \"message\": \"\" } ] } "
  },
  
  
  {
    "title": "Agreements",
    
    "url": "/api/users/useragreements/",
    "body": " Agreements This API lest you store information that user has agreed to marketing and terms and conditions agreements.  Save user agreements   Save user agreements POST Users/Agreements  Request saves information that user has agreed to marketing and terms and conditions agreements.  Parameters    Name Type Description     userId long  Required. User identifier.     Body parameters    Name Type Description     newsletterAgreement bool  true if user has agreed to receive marketing newsletter, false otherwise.   termsAndConditionsAgreement bool  true if user has agreed to general terms and conditions, false otherwise.     Response User details.  Example request In this example we store information that user has with id = 236 has agreed to service terms and conditions.  curl -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"termsAndConditionsAgreement\": true, \"newsletterAgreement\": false, }' http://yoursubdomain.perfectgym.com/api/Users/Agreements?userId=236   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 448035, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"http://yoursubdomain.perfectgym.com/Api/Files/File?fileId=78\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": true, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"61 1090 1014 0000 0712 1981 2874\", \"ownerName\": \"John Fibo\", \"street\": \"Przyczółkowa 334\", \"cityAndPostalCode\": \"02-962 Warszawa\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2016-01-26T00:00:00\", \"startDate\": \"2016-01-26T00:00:00\", \"cancelDate\": \"\", \"endDate\": \"\", \"membership\": { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false }, \"paymentPlan\": { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false }, \"discounts\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ], \"isActive\": true, \"isDeleted\": false } } ] } "
  },
  
  
  {
    "title": "User contracts",
    
    "url": "/api/users/usercontract/",
    "body": " User contracts This API lest you list, assign and delete user contracts.  Assign contract to a club user Delete user contract   Assign contract to a club user POST Users/Contract  Request assigns new contract to existing club user.  Parameters    Name Type Description     userId long  Required. User identifier. Request assigns new contract to user identified by userId.     Body parameters    Name Type Description     paymentPlanId string Payment plan identifier. Request creates new contract based on payment plan identified by paymentPlanId    startDate string Contract start date.   signDate string Contract sign date.   discountIds array Array of discount identifiers to be applied to contract.     Response User details with contract detailed description.  Example request In this example we create new contract based on payment plan with id = 44 and we assigne it to user with id of value 236. Also discount with id = 10 is applied.  curl -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"paymentPlanId\": 44, \"startDate\": \"2016-01-26T00:00:00\", \"signDate\": \"2016-01-26T00:00:00\", \"discountIds\": [10] }' http://yoursubdomain.perfectgym.com/api/Users/Contract?userId=236   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 448035, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": false, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"\", \"ownerName\": \"\", \"street\": \"\", \"cityAndPostalCode\": \"\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2016-01-26T00:00:00\", \"startDate\": \"2016-01-26T00:00:00\", \"cancelDate\": \"\", \"endDate\": \"\", \"membership\": { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false }, \"paymentPlan\": { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false }, \"discounts\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ], \"isActive\": true, \"isDeleted\": false } } ] }   Delete user contract DELETE Users/Contract  Request deletes user contract.  Parameters    Name Type Description     userId long  Required. User identifier.   contractId long  Required. Contract identifier. Request deletes user contract identified by contractId.     Response User details.  Example request In this example we delete user contract with id = 10358  curl -X DELETE -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" http://yoursubdomain.perfectgym.com/api/Users/Contract?userId=236&amp;contractId=10358   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 448035, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"http://yoursubdomain.perfectgym.com/Api/Files/File?fileId=78\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": false, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"\", \"ownerName\": \"\", \"street\": \"\", \"cityAndPostalCode\": \"\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": \"\" } ] } "
  },
  
  
  {
    "title": "User credit card",
    
    "url": "/api/users/usercreditcard/",
    "body": " User credit card This API lest you assign credit card to a club user.  Assign credit card to a club user   Assign credit card to a club user POST Users/CreditCard  Request assigns a credit card to existing club user and selects it as current payment method.  Parameters    Name Type Description     userId long  Required. User identifier. Request assigns new credit card to user identified by userId.     Body parameters    Name Type Description     bankName string Name of credit card issuer   cardNumber string Credit card number.   expirationYear int Credit card expiration year.   expirationMonth int Credit card expiration month.   addressCity string Card holder city name.   addressLine string Card holder address.   addressZipCode string Card holder zip code.   cardHolderName string Card holder name.   cvcCvv string Card CVC / CVV.     Response User details representing user credit card was assigned to.  Example request In this example we assign credit card to a user with id = 236.  curl -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"bankName\": \"Bank\", \"cardNumber\": \"5555555555554444\", \"expirationYear\": 2016, \"expirationMonth\": 12, \"addressCity\": \"Warsaw\", \"addressLine\": \"ul. Przyczolkowa 334\", \"addressZipCode\": \"02-962\", \"cardHolderName\": \"John Fibo\", \"cvcCvv\": \"000\" }' http://yoursubdomain.perfectgym.com/api/Users/CreditCard?userId=236   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 448035, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": false, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"\", \"ownerName\": \"\", \"street\": \"\", \"cityAndPostalCode\": \"\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2016-01-26T00:00:00\", \"startDate\": \"2016-01-26T00:00:00\", \"cancelDate\": \"\", \"endDate\": \"\", \"membership\": { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false }, \"paymentPlan\": { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false }, \"discounts\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ], \"isActive\": true, \"isDeleted\": false } } ] } "
  },
  
  
  {
    "title": "User details",
    
    "url": "/api/users/userdetails/",
    "body": " User details User details is detaild representation of single user of your gym.    User details properties Retrive detailed information about user identified by user unique identifier. Retrive detailed information about user identified by personal id.    User details properties User is described by the following properties    Name Type Description     id long Unique identifier of user.   timestamp long Timestamp. Indicates when resource was last modified.   personalId string User personal identifier.   number string User number.   cardNumber string User membership card number.   firstName string User first name.   lastName string User last name.   email string User email address.   photoUrl string User photo URL.   birthDate string User birth date.   isForeigner bool Indicates if user is a forigner.   sex string User sex. Possible values:  Male Female     phoneNumber string User phone number.   idCardName string User identity card name.   idCardNumber string User identity card number.   legalGuardian string User legal guardian full name.   newsletterAgreement bool User identity card name.   termsAndConditionsAgreement bool User identity card number.   address Address User address.   isActive bool Indicates if cuser is marked as active.   isDeleted bool Indicates if resource is deleted.   currentContract Contract User's current contract.     Retrive detailed information about user identified by user unique identifier. GET Users/User  Returns detailed user informations.  Parameters    Name Type Description     userId long User's identifier.     Example request In this example we fetch user (with id = 1) detailed information.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Users/User?userId=1   Example response Status: 200 OK  { \"elements\": [ { \"id\": 1, \"timestamp\": 447183, \"personalId\": \"80010101234\", \"number\": \"102000001\", \"cardNumber\": \"\", \"firstName\": \"Jan\", \"lastName\": \"Nowak\", \"email\": \"nowak@example.com\", \"photoUrl\": \"\", \"birthDate\": \"1944-09-17T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": false, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"20-259\", \"line1\": \"al. Jerozolimskie 114\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"\", \"ownerName\": \"\", \"street\": \"\", \"cityAndPostalCode\": \"\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2014-03-28T00:00:00\", \"startDate\": \"2014-04-01T00:00:00\", \"cancelDate\": \"2015-03-31T23:59:59\", \"endDate\": \"2015-03-31T23:59:59\", \"membership\": { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false }, \"paymentPlan\": { \"id\": 2, \"timestamp\": 252688, \"name\": \"Student weekly 45\", \"isActive\": true, \"isDeleted\": false }, \"discounts\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ], \"isActive\": true, \"isDeleted\": false } } ] }   Retrive detailed information about user identified by personal id. GET Users/User  Returns detailed informations of user identified by personal id. User must be uniquly identified, if more then one user with given personal id exists, empty result is returned.  Parameters    Name Type Description     personalId string User personal id.     Example request In this example we fetch user (with personal id = 80010101234) detailed information.  curl -i -X GET -H \"Authorization: Bearer $ACCESS_TOKEN\" http://yoursubdomain.perfectgym.com/api/Users/User?personalId=80010101234   Example response Status: 200 OK  { \"elements\": [ { \"id\": 1, \"timestamp\": 447183, \"personalId\": \"80010101234\", \"number\": \"102000001\", \"cardNumber\": \"\", \"firstName\": \"Jan\", \"lastName\": \"Nowak\", \"email\": \"nowak@example.com\", \"photoUrl\": \"\", \"birthDate\": \"1944-09-17T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": false, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"20-259\", \"line1\": \"al. Jerozolimskie 114\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"\", \"ownerName\": \"\", \"street\": \"\", \"cityAndPostalCode\": \"\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2014-03-28T00:00:00\", \"startDate\": \"2014-04-01T00:00:00\", \"cancelDate\": \"2015-03-31T23:59:59\", \"endDate\": \"2015-03-31T23:59:59\", \"membership\": { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false }, \"paymentPlan\": { \"id\": 2, \"timestamp\": 252688, \"name\": \"Student weekly 45\", \"isActive\": true, \"isDeleted\": false }, \"discounts\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ], \"isActive\": true, \"isDeleted\": false } } ] } "
  },
  
  
  {
    "title": "Direct debit",
    
    "url": "/api/users/userdirectdebit/",
    "body": " Direct debit This API lest you assign bank account details to a club user.  Assign bank account details to a club user   Assign bank account details to a club user POST Users/DirectDebit  Request assigns bank account details to existing club user and selects it as current payment method.  Parameters    Name Type Description     userId long  Required. User identifier. Request assigns new bank account details to user identified by userId.     Body parameters    Name Type Description     accountNumber string Bank account number (IBAN format).   ownerName string Bank account owner name.   street int Bank account owner street.   cityAndPostalCode int Bank account owner city and zip code.     Response User details including bank account details if operation is successful, or collection of errors with direct debit error codes.  Example request In this example we assign bank account details to a user with id = 236.  curl -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"accountNumber\": \"61 1090 1014 0000 0712 1981 2874\", \"ownerName\": \"John Fibo\", \"street\": \"Przyczółkowa 334\", \"cityAndPostalCode\": \"02-962 Warszawa\", }' http://yoursubdomain.perfectgym.com/api/Users/DirectDebit?userId=236   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 448035, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"http://yoursubdomain.perfectgym.com/Api/Files/File?fileId=78\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": false, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"61 1090 1014 0000 0712 1981 2874\", \"ownerName\": \"John Fibo\", \"street\": \"Przyczółkowa 334\", \"cityAndPostalCode\": \"02-962 Warszawa\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2016-01-26T00:00:00\", \"startDate\": \"2016-01-26T00:00:00\", \"cancelDate\": \"\", \"endDate\": \"\", \"membership\": { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false }, \"paymentPlan\": { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false }, \"discounts\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ], \"isActive\": true, \"isDeleted\": false } } ] }   Example error response Status: 400 Bad Request  { \"errors\": [ { \"code\": \"InvalidIBAN\", \"property\": \"\", \"message\": \"\" } ] } "
  },
  
  
  {
    "title": "User membership card",
    
    "url": "/api/users/usermembershipcard/",
    "body": " User membership card This API lest you assign membership card to a club user.  Assign membership card to a club user   Assign membership card to a club user POST Users/MembershipCard  Request assigns membership card to a club user.  Parameters    Name Type Description     userId long  Required. User identifier. Request assigns membership card to user identified by userId.     Body parameters    Name Type Description     cardNumber string Membership card number.     Response User details.  Example request In this example we assign new membership card to a user with id = 236.  curl -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"cardNumber\": \"123456789\" }' http://yoursubdomain.perfectgym.com/api/Users/MembershipCard?userId=236   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 448035, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"123456789\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"http://yoursubdomain.perfectgym.com/Api/Files/File?fileId=78\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": true, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"61 1090 1014 0000 0712 1981 2874\", \"ownerName\": \"John Fibo\", \"street\": \"Przyczółkowa 334\", \"cityAndPostalCode\": \"02-962 Warszawa\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": { \"id\": 10358, \"timestamp\": 350287, \"signUpDate\": \"2016-01-26T00:00:00\", \"startDate\": \"2016-01-26T00:00:00\", \"cancelDate\": \"\", \"endDate\": \"\", \"membership\": { \"id\": 1, \"timestamp\": 349423, \"name\": \"Open\", \"isActive\": true, \"isDeleted\": false }, \"paymentPlan\": { \"id\": 44, \"timestamp\": 447623, \"name\": \"Open 24m\", \"isActive\": true, \"isDeleted\": false }, \"discounts\": [ { \"id\": 10, \"isActive\": true, \"name\": \"50%\", \"administartionFeeDiscountType\": \"ValueDiscount\", \"joiningFeeDiscountType\": \"None\", \"membershipFeeDiscountType\": \"PercentDiscount\", \"administartionFeeDiscountValue\": 0, \"joiningFeeDiscountValue\": \"\", \"membershipFeeDiscountValue\": 50 } ], \"isActive\": true, \"isDeleted\": false } } ] } "
  },
  
  
  {
    "title": "User photo",
    
    "url": "/api/users/userphoto/",
    "body": " User photo This API lest you assign photo to a club user.  Assign photo to a club user   Assign photo to a club user POST Users/Photo  Request assigns photo to a club user.  Parameters    Name Type Description     userId long  Required. User identifier. Request assigns new photo to user identified by userId.     Body parameters    Name Type Description     extension string Photo file extension. Possible values:  BMP JPEG JPG PMG     data string Photo data base64 encoded.     Response User details.  Example request In this example we assign photo to a user with id = 236.  curl -X POST -H \"Authorization: Bearer $ACCESS_TOKEN\" -H \"Content-Type: application/json\" -d '{ \"extension\": \"png\", \"data\": \"... photo data ...\", }' http://yoursubdomain.perfectgym.com/api/Users/Photo?userId=236   Example response Status: 200 OK  { \"elements\": [ { \"id\": 236, \"timestamp\": 448035, \"personalId\": \"80010101234\", \"number\": \"2b7b02df-08ae-4720-a3ce-a594bfc46d47\", \"cardNumber\": \"\", \"firstName\": \"John\", \"lastName\": \"Fibo\", \"email\": \"john.fibo@perfectgym.pl\", \"phone\": \"0048123456789\", \"idCardName\": \"Passport\", \"idCardNumber\": \"ABC 123456\", \"legalGuardian\": \"\", \"photoUrl\": \"http://yoursubdomain.perfectgym.com/Api/Files/File?fileId=78\", \"birthDate\": \"1978-06-01T00:00:00\", \"isForeigner\": false, \"sex\": \"Male\", \"newsletterAgreement\": false, \"termsAndConditionsAgreement\": false, \"address\": { \"country\": \"Poland\", \"city\": \"Warszawa\", \"postalCode\": \"02-962\", \"line1\": \"ul. Przyczolkowa 334\", \"line2\": \"\" }, \"directDebit\": { \"accountNumber\": \"\", \"ownerName\": \"\", \"street\": \"\", \"cityAndPostalCode\": \"\" }, \"homeClubId\": 12, \"isActive\": true, \"isDeleted\": false, \"currentContract\": \"\" } ] } "
  },
  
  
  {
    "title": "Users",
    
    "url": "/api/users/",
    "body": " Users The Users APIs provides access to users list available in your company.  User details  User details API gives you read only access to detailed information about your clubs users.  Adding and updating user  Adding and updating user API lest you add new users to your company users list or update basic data of existing users.  User contract  User contract API lest you assign contract to a club user.  User credit card  User credit card API lest you assign credit card to a club user.  Direct debit  Direct debit API lest you assign back account details to a club user.  Agreements  Agreements API lest you store information if user has agreed to marketing and terms and conditions agreements.  Password updating and credential validation  Password updating and credential validation API lest you update user password and validate user credentials."
  },
  
  
  {
    "title": "Versions",
    
    "url": "/api/versions/",
    "body": " Versions The API is currently in early alpha version and is in constant development. Please expect breaking changes."
  },
  
  
  {
    "title": "PerfectGym API Overview",
    
    "url": "/api/",
    "body": " Overview The PerfectGym API lets you tap into PerfectGym and build your own PerfectGym-powered web, desktop and mobile applications. The API provides a simple, resource-oriented, RESTful interface with JSON-formatted responses to use PerfectGym’s features.  General API conventions All API access is over HTTPS, and accessed from the yourcompany.perfectgym.com/api/. All data is sent and received as JSON.  curl -i https://yourcompany.perfectgym.com/api/Classes/Classes/1/0 HTTP/1.1 200 OK Cache-Control: no-cache Pragma: no-cache Content-Length: 61 Content-Type: application/json; charset=utf-8 Expires: -1 Server: Microsoft-IIS/8.5 WWW-Authenticate: Bearer X-AspNet-Version: 4.0.30319 X-Powered-By: ASP.NET pg-app: externalapi X-Powered-By: ARR/3.0 pg-app: Routing Date: Fri, 18 Dec 2015 16:47:49 GMT   Blank fields Blank fields are included as null instead of being omitted.  Identifiers &amp; timestamps All resources are identified with long id and timestamp attributes.  Date format All dates and times follow the ISO 8601 format and are provided in local time zone: YYYY-MM-DDTHH:MM:SS   Endpoint names and return values An endpoint's name indicates the type of data it handles and the action it performs on that data. The most common actions are:    Action HTTP Method Description     List GET Returns summary information for all entities that match query parameters you provide. To get detailed information for a particular entity, first get the entity's id with the appropriate List endpoint, then provide the id to the corresponding Retrieve endpoint.   Retrive GET Provides detailed information for the single entity that matches the identifier you provide.   Execute POST Used for invoking actions.   Add POST Used for creating resources.   Update PUT Used for updating resources.   Delete DELETE Used for deleting resources.   "
  },
  
  
  {
    "title": "Address",
    
    "url": "/appendix/datatypes/address/",
    "body": " Address Represents an address and is used accress all PerfectGym API.  Address properties Address is described by the following properties    Name Type Description     line1 string Line 1 of the address e.g. street etc.   line2 string Line 2 of the address e.g. suite, apartament number etc.   postalCode string Zip code or equivalent.   city string City name.   country string Country name.   "
  },
  
  
  {
    "title": "Club access rule",
    
    "url": "/appendix/datatypes/clubaccessrule/",
    "body": " Club access rule Represents a club access rule.  Club access rule properties Club access rule is described by the following properties    Name Type Description     id long Unique access rule identifier.   timestamp long Timestamp. Indicates when resource was last modified.   isDeleted bool Indicates if resource is deleted.   name string Access rule name.   description string Access rule description.   allowedClubs array An array of Club objects, each representing club membership holder has access to.   allowedZoneTypes array An array of Club Zone Types objects, each representing club zone type membership holder has access to.   "
  },
  
  
  {
    "title": "Contact",
    
    "url": "/appendix/datatypes/contact/",
    "body": " Contact Represents an individual or a departament in your club, user can reach using e-mail or phone.  Contact properties Contact is described by the following properties    Name Type Description     id long Unique identifier of contact.   timestamp long Timestamp. Indicates when resource was last modified.   title string Contact's job title.   name string Contact's name.   email string Contact's e-mail address.   phoneNumber string Contact's phone number.   isDeleted bool Indicates if resource is deleted.   "
  },
  
  
  {
    "title": "Fee",
    
    "url": "/appendix/datatypes/contractfees/",
    "body": " Fee Represents a set of contract fees.  Fee properties Contract fees are described by the following properties    Name Type Description     joiningFee Fee Joining fee.   administarationFee Fee Administration fee.   membershipFee Fee Membership fee.   freezFee Fee Freeze fee.   "
  },
  
  
  {
    "title": "Equipment",
    
    "url": "/appendix/datatypes/equipment/",
    "body": " Equipment Represents an equipment type available in your club.  Equipment properties Equipment is described by the following properties    Name Type Description     id long Unique identifier of equipment.   timestamp long Timestamp. Indicates when resource was last modified.   type string Equipment's type.   name string Equipment's name.   quantity int Total number of equipment's units.   isDeleted bool Indicates if resource is deleted.   "
  },
  
  
  {
    "title": "Error",
    
    "url": "/appendix/datatypes/error/",
    "body": " Error Represents a logical error that occured during API call.  Error properties Address is described by the following properties    Name Type Description     code string Error code.   property string Resource property that caused an error (if available).   message string Error message (if available).   "
  },
  
  
  {
    "title": "Facility",
    
    "url": "/appendix/datatypes/facility/",
    "body": " Facility Represents a facility available to your club users.  Facility properties Facility is described by the following properties    Name Type Description     id long Unique identifier of facility.   timestamp long Timestamp. Indicates when resource was last modified.   type string Facility type.   name string Facility name.   isDeleted bool Indicates if resource is deleted.   "
  },
  
  
  {
    "title": "Fee",
    
    "url": "/appendix/datatypes/fee/",
    "body": " Fee Represents a fee and is used accress all PerfectGym API.  Fee properties Fee is described by the following properties    Name Type Description     net decimal Net fee.   tax decimal Tax value.   taxRate decimal Tax rate.   gross decimal Gross fee.   "
  },
  
  
  {
    "title": "Opening hours",
    
    "url": "/appendix/datatypes/openinghours/",
    "body": " Opening hours Represents a timeframe your club is opened on a given day.  Opening hours properties Opening hours are described by the following properties    Name Type Description     id long Unique identifier of opening hours.   timestamp long Timestamp. Indicates when resource was last modified.   isClosed bool Indicates if club is closed on a given week day.   dayOfWeekOrHoliday string Day of week given object refers to. Possible values:  Monday Tuesday Wednesday Thursday Friday Saturday Sunday Holidays     openFrom string Opening hour.   openUntil string Closing hour.   isDeleted bool Indicates if resource is deleted.   "
  },
  
  
  {
    "title": "Payment details",
    
    "url": "/appendix/datatypes/paymentdetails/",
    "body": " Payment details Represents an URL and transaction identifier, which allows to execute pyment using online payment systems.  Payment details properties Payment details is described by the following properties    Name Type Description     paymentUrl string Payment URL. User should be redirected to payment url to initiate online payment   paymentId string Payment identifier. Can be used to check payment status using payment status endpoint.   "
  },
  
  
  {
    "title": "Url",
    
    "url": "/appendix/datatypes/url/",
    "body": " Url Represents an url to your social media service site.  Url properties Url is described by the following properties    Name Type Description     id long Unique identifier of an url.   timestamp long Timestamp. Indicates when resource was last modified.   mediaType string Type of internet site or social media service. Possible values:  Facebook Twitter LinkedIn YouTube Pinterest Instagram, Foursquare Blog GooglePlus GoogleMaps     url string Url to a site.   isDeleted bool Indicates if resource is deleted.   "
  },
  
  
  {
    "title": "Zone",
    
    "url": "/appendix/datatypes/zone/",
    "body": " Zone Represents a distinct area in your club.  Zone properties Zone is described by the following properties    Name Type Description     id long Unique identifier of zone.   timestamp long Timestamp. Indicates when resource was last modified.   clubZoneTypeId long  Club zone type identifier.   parentId string Unique identifier of zone's parrent zone.   name string Zone's name.   description string Zone's description.   isDeleted bool Indicates if resource is deleted.   "
  },
  
  
  {
    "title": "Zone type",
    
    "url": "/appendix/datatypes/zonetype/",
    "body": " Zone type Represents a club zone type that groups your club's zones.  Zone type properties Zone type is described by the following properties    Name Type Description     id long Unique identifier of zone type.   timestamp long Timestamp. Indicates when resource was last modified.   isDeleted bool Indicates if resource is deleted.   name string Zone type name.   description string Zone type description.   dailyLimiy string Zone users daily limit.   "
  },
  
  
  {
    "title": "Add user error codes",
    
    "url": "/appendix/errorcodes/addusererrorcode/",
    "body": " Add user error codes    Code Type Description     UserAlreadyExist string User with provided personal id, mobile phone or email already exists.   "
  },
  
  
  {
    "title": "Class booking error codes",
    
    "url": "/appendix/errorcodes/classbookingerrorcode/",
    "body": " Class booking error codes    Code Type Description     ClassAlreadyBooked string Class is already booked by the user.   BookingRejected string Booking is rejected.   BookingBlockedForUser string Booking is blocked for user. Booking can be blocked if user signed up for class and didn't show up.   BookingInZoneNotAllowed string User membership does not allow to book classes in a specific club zone.   BookingWithDebitNotAllowed string User has debit.   BookingWithoutActiveContractNotAllowed string User does not have an active membership.   BookingNotAllowed string Booking for selected classes is not allowed.   BookingToLate string It is too late to book selected class.   BookingToSoon string It is to early to book selected class.   DailyBookingLimitReached string Daily club booking limit has beed exceeded.   DailyZoneBookingLimitReached string Daily club zone booking limit has been exceeded.   UserNotAllowedToAccessClub string User membership does not allow to access club during selected class.   StandbyListLimitReached string Standby list limit has beed exceeded.   "
  },
  
  
  {
    "title": "Class cancel error codes",
    
    "url": "/appendix/errorcodes/classcancelerrorcode/",
    "body": " Class cancel error codes    Code Type Description     ClassNotBooked string User has not been signed up for class.   ToLateToCancel string It is to late to cancel selected class.   "
  },
  
  
  {
    "title": "Class rating error codes",
    
    "url": "/appendix/errorcodes/classratingerrorcode/",
    "body": " Class rating error codes    Code Type Description     ClassAlreadyRated string User has already rated selected class.   UserDidNotAttendClass string User didn't attend selected class.   "
  },
  
  
  {
    "title": "Credit card payment error codes",
    
    "url": "/appendix/errorcodes/creditcardpaymenterrorcode/",
    "body": " Credit card payment error codes    Code Type Description     InvalidUser string User with provided id does not exist.   InvalidClub string User with provided id does not exist.   InvalidTotalAmount string Total amount is not equal to sum of all fees.   NoCreditCard string No credit card data.   PaymentError string Payment provider error.   "
  },
  
  
  {
    "title": "Direct debit error codes",
    
    "url": "/appendix/errorcodes/directdebiterrorcode/",
    "body": " Direct debit error codes    Code Type Description     InvalidIBAN string IBAN account number is invalid.   "
  },
  
  
  {
    "title": "Direct debit error codes",
    
    "url": "/appendix/errorcodes/directdebiterrorcodes/",
    "body": " Direct debit error codes    Code Type Description     InvalidIBAN string IBAN account number is invalid.   "
  },
  
  
  {
    "title": "Instructor rating error codes",
    
    "url": "/appendix/errorcodes/instructorratingerrorcode/",
    "body": " Instructor ratingerror codes    Code Type Description     InstructorAlreadyRated string User has already rated instructor.   UserDidNotAttendClass string User didn't attend selected class.   ClassWithoutAssignedInstructor string Class has no assigned instructor.   "
  },
  
  
  {
    "title": "Update user error codes",
    
    "url": "/appendix/errorcodes/updateusererrorcode/",
    "body": " Update user error codes    Code Type Description     UserDoesNotExists string User with provided id does not exist.   InvalidAttributeValue string One of provided user attributes is invalid.   "
  },
  
  
  {
    "title": "Validate user credentials error codes",
    
    "url": "/appendix/errorcodes/validatecredentialserrorcode/",
    "body": " Validate user credentials error codes    Code Type Description     InvalidUserNameOrPassword string Username or password is invalid.   "
  },
  
  
  {
    "title": "Appendix",
    
    "url": "/appendix/",
    "body": " Appendix"
  },
  
  
  
  {
    "title": "Automating deployments to integrators",
    
    "url": "/guides/automating-deployments-to-integrators/",
    "body": " Automating deployments to integrators  Sending deployments whenever you push to a repository Hooking up an integrator to deployments  The \"Delivering deployments\" guide describes how to build a server that uses the Deployments API to easily get your code from GitHub into production. But what if you don't want to host a separate service for deploying code? What if you just want to merge code and have it deploy without thinking about maintaining another app? You can use the GitHub Auto-Deployment service to receive changes made to your repository and configure it to deliver a deployment to integrators. The Auto-Deployment service can deliver payloads based on two events: whenever a push is made and whenever the CI status is passing. Here's a diagram demonstrating what the process might look like: +--------------------+ +--------+ +-----------+ | GitHub Auto-Deploy | | GitHub | | Heroku | | Service | +--------+ +-----------+ +--------------------+ | | | | | | Create Deployment | | |------------------------&gt;| | | | | | | | | | Deployment Event | | |---------------------------------&gt;| | | | | | Deployment Status (pending) | | |&lt;---------------------------------| | | | | | | | | Deployment Status (success) | | |&lt;---------------------------------| | | |   Note that the Auto-Deployment service only picks up changes from your default branch, which is usually master.   Sending deployments whenever you push to a repository The Auto-Deployment service will be responsible for creating deployments when a push is made to your default branch. Next, we'll set up a service to receive those deployment events and handle the deployment of your project.  Navigate to the repository where you’re setting up your deployments. In your repository's right sidebar, click . On the left, click Webhooks &amp; Services.   Click Add service, then type \"GitHub Auto-Deployment.\"   Under GitHub token, paste an access token you've created. It must have at least the repo scope. For more information, see \"Creating an access token for command-line use.\" Under Environments, optionally provide a list of environments you'd like to send your deployments to. This can be any string you define to describe your environment. The default is \"production.\" If you only want builds that successfully passed a continuous test suite, select Deploy on status. If you're running this service on GitHub Enterprise, you must pass in your appliance's endpoint URL. Click Add service.   Hooking up an integrator to deployments To implement our deployments, we'll use Heroku as an example service.  Navigate to the repository where you’re setting up your deployments. In your repository's right sidebar, click . On the left, click Webhooks &amp; Services.   Click Add service, then type \"Heroku.\"   Type the name of the Heroku application your GitHub repository should deploy to. Enter in your Heroku OAuth token. You must generate this yourself following the instructions in Heroku's documentation. Under GitHub token, paste the same token you provided earlier. Click Add service.  From now on, any commits made to your master branch--including those generated from merging pull requests--will automatically trigger a deployment to your Heroku application."
  },
  
  
  {
    "title": "Basics of Authentication",
    
    "url": "/guides/basics-of-authentication/",
    "body": " Basics of Authentication  Registering your app Accepting user authorization Implementing \"persistent\" authentication  In this section, we're going to focus on the basics of authentication. Specifically, we're going to create a Ruby server (using Sinatra) that implements the web flow of an application in several different ways.  You can download the complete source code for this project from the platform-samples repo.   Registering your app First, you'll need to register your application. Every registered OAuth application is assigned a unique Client ID and Client Secret. The Client Secret should not be shared! That includes checking the string into your repository. You can fill out every piece of information however you like, except the Authorization callback URL. This is easily the most important piece to setting up your application. It's the callback URL that GitHub returns the user to after successful authentication. Since we're running a regular Sinatra server, the location of the local instance is set to http://localhost:4567. Let's fill in the callback URL as http://localhost:4567/callback.  Accepting user authorization Now, let's start filling out our simple server. Create a file called server.rb and paste this into it: require 'sinatra' require 'rest-client' require 'json' CLIENT_ID = ENV['GH_BASIC_CLIENT_ID'] CLIENT_SECRET = ENV['GH_BASIC_SECRET_ID'] get '/' do erb :index, :locals =&gt; {:client_id =&gt; CLIENT_ID} end  Your client ID and client secret keys come from your application's configuration page. You should never, ever store these values in GitHub--or any other public place, for that matter. We recommend storing them as environment variables--which is exactly what we've done here. Next, in views/index.erb, paste this content: &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt; Well, hello there! &lt;/p&gt; &lt;p&gt; We're going to now talk to the GitHub API. Ready? &lt;a href=\"https://github.com/login/oauth/authorize?scope=user:email&amp;client_id=&lt;%= client_id %&gt;\"&gt;Click here&lt;/a&gt; to begin!&lt;/a&gt; &lt;/p&gt; &lt;p&gt; If that link doesn't work, remember to provide your own &lt;a href=\"/v3/oauth/#web-application-flow\"&gt;Client ID&lt;/a&gt;! &lt;/p&gt; &lt;/body&gt; &lt;/html&gt;  (If you're unfamiliar with how Sinatra works, we recommend reading the Sinatra guide.) Also, notice that the URL uses the scope query parameter to define the scopes requested by the application. For our application, we're requesting user:email scope for reading private email addresses. Navigate your browser to http://localhost:4567. After clicking on the link, you should be taken to GitHub, and presented with a dialog that looks something like this:  If you trust yourself, click Authorize App. Wuh-oh! Sinatra spits out a 404 error. What gives?! Well, remember when we specified a Callback URL to be callback? We didn't provide a route for it, so GitHub doesn't know where to drop the user after they authorize the app. Let's fix that now!  Providing a callback In server.rb, add a route to specify what the callback should do: get '/callback' do # get temporary GitHub code... session_code = request.env['rack.request.query_hash']['code'] # ... and POST it back to GitHub result = RestClient.post('https://github.com/login/oauth/access_token', {:client_id =&gt; CLIENT_ID, :client_secret =&gt; CLIENT_SECRET, :code =&gt; session_code}, :accept =&gt; :json) # extract the token and granted scopes access_token = JSON.parse(result)['access_token'] end  After a successful app authentication, GitHub provides a temporary code value. You'll need to POST this code back to GitHub in exchange for an access_token. To simplify our GET and POST HTTP requests, we're using the rest-client. Note that you'll probably never access the API through REST. For a more serious application, you should probably use a library written in the language of your choice.  Checking granted scopes In the future, users will be able to edit the scopes you requested, and your application might be granted less access than you originally asked for. So, before making any requests with the token, you should check the scopes that were granted for the token by the user. The scopes that were granted are returned as a part of the response from exchanging a token. get '/callback' do # ... # Get the access_token using the code sample above # ... # check if we were granted user:email scope scopes = JSON.parse(result)['scope'].split(',') has_user_email_scope = scopes.include? 'user:email' end  In our application, we're using scopes.include? to check if we were granted the user:email scope needed for fetching the authenticated user's private email addresses. Had the application asked for other scopes, we would have checked for those as well. Also, since there's a hierarchical relationship between scopes, you should check that you were granted the lowest level of required scopes. For example, if the application had asked for user scope, it might have been granted only user:email scope. In that case, the application wouldn't have been granted what it asked for, but the granted scopes would have still been sufficient. Checking for scopes only before making requests is not enough since it's posible that users will change the scopes in between your check and the actual request. In case that happens, API calls you expected to succeed might fail with a 404 or 401 status, or return a different subset of information. To help you gracefully handle these situations, all API responses for requests made with valid tokens also contain an X-OAuth-Scopes header. This header contains the list of scopes of the token that was used to make the request. In addition to that, the Authorization API provides an endpoint to check a token for validity. Use this information to detect changes in token scopes, and inform your users of changes in available application functionality.  Making authenticated requests At last, with this access token, you'll be able to make authenticated requests as the logged in user: # fetch user information auth_result = JSON.parse(RestClient.get('https://api.github.com/user', {:params =&gt; {:access_token =&gt; access_token}})) # if the user authorized it, fetch private emails if has_user_email_scope auth_result['private_emails'] = JSON.parse(RestClient.get('https://api.github.com/user/emails', {:params =&gt; {:access_token =&gt; access_token}})) end erb :basic, :locals =&gt; auth_result  We can do whatever we want with our results. In this case, we'll just dump them straight into basic.erb: &lt;p&gt;Hello, &lt;%= login %&gt;!&lt;/p&gt; &lt;p&gt; &lt;% if !email.nil? &amp;&amp; !email.empty? %&gt; It looks like your public email address is &lt;%= email %&gt;. &lt;% else %&gt; It looks like you don't have a public email. That's cool. &lt;% end %&gt; &lt;/p&gt; &lt;p&gt; &lt;% if defined? private_emails %&gt; With your permission, we were also able to dig up your private email addresses: &lt;%= private_emails.map{ |private_email_address| private_email_address[\"email\"] }.join(', ') %&gt; &lt;% else %&gt; Also, you're a bit secretive about your private email addresses. &lt;% end %&gt; &lt;/p&gt;   Implementing \"persistent\" authentication It'd be a pretty bad model if we required users to log into the app every single time they needed to access the web page. For example, try navigating directly to http://localhost:4567/basic. You'll get an error. What if we could circumvent the entire \"click here\" process, and just remember that, as long as the user's logged into GitHub, they should be able to access this application? Hold on to your hat, because that's exactly what we're going to do. Our little server above is rather simple. In order to wedge in some intelligent authentication, we're going to switch over to using sessions for storing tokens. This will make authentication transparent to the user. Also, since we're persisting scopes within the session, we'll need to handle cases when the user updates the scopes after we checked them, or revokes the token. To do that, we'll use a rescue block and check that the first API call succeeded, which verifies that the token is still valid. After that, we'll check the X-OAuth-Scopes response header to verify that the user hasn't revoked the user:email scope. Create a file called advanced_server.rb, and paste these lines into it: require 'sinatra' require 'rest_client' require 'json' # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below # if ENV['GITHUB_CLIENT_ID'] &amp;&amp; ENV['GITHUB_CLIENT_SECRET'] # CLIENT_ID = ENV['GITHUB_CLIENT_ID'] # CLIENT_SECRET = ENV['GITHUB_CLIENT_SECRET'] # end CLIENT_ID = ENV['GH_BASIC_CLIENT_ID'] CLIENT_SECRET = ENV['GH_BASIC_SECRET_ID'] use Rack::Session::Pool, :cookie_only =&gt; false def authenticated? session[:access_token] end def authenticate! erb :index, :locals =&gt; {:client_id =&gt; CLIENT_ID} end get '/' do if !authenticated? authenticate! else access_token = session[:access_token] scopes = [] begin auth_result = RestClient.get('https://api.github.com/user', {:params =&gt; {:access_token =&gt; access_token}, :accept =&gt; :json}) rescue =&gt; e # request didn't succeed because the token was revoked so we # invalidate the token stored in the session and render the # index page so that the user can start the OAuth flow again session[:access_token] = nil return authenticate! end # the request succeeded, so we check the list of current scopes if auth_result.headers.include? :x_oauth_scopes scopes = auth_result.headers[:x_oauth_scopes].split(', ') end auth_result = JSON.parse(auth_result) if scopes.include? 'user:email' auth_result['private_emails'] = JSON.parse(RestClient.get('https://api.github.com/user/emails', {:params =&gt; {:access_token =&gt; access_token}, :accept =&gt; :json})) end erb :advanced, :locals =&gt; auth_result end end get '/callback' do session_code = request.env['rack.request.query_hash']['code'] result = RestClient.post('https://github.com/login/oauth/access_token', {:client_id =&gt; CLIENT_ID, :client_secret =&gt; CLIENT_SECRET, :code =&gt; session_code}, :accept =&gt; :json) session[:access_token] = JSON.parse(result)['access_token'] redirect '/' end  Much of the code should look familiar. For example, we're still using RestClient.get to call out to the GitHub API, and we're still passing our results to be rendered in an ERB template (this time, it's called advanced.erb). Also, we now have the authenticated? method which checks if the user is already authenticated. If not, the authenticate! method is called, which performs the OAuth flow and updates the session with the granted token and scopes. Next, create a file in views called advanced.erb, and paste this markup into it: &lt;html&gt; &lt;head&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Well, well, well, &lt;%= login %&gt;!&lt;/p&gt; &lt;p&gt; &lt;% if !email.empty? %&gt; It looks like your public email address is &lt;%= email %&gt;. &lt;% else %&gt; It looks like you don't have a public email. That's cool. &lt;% end %&gt; &lt;/p&gt; &lt;p&gt; &lt;% if defined? private_emails %&gt; With your permission, we were also able to dig up your private email addresses: &lt;%= private_emails.map{ |private_email_address| private_email_address[\"email\"] }.join(', ') %&gt; &lt;% else %&gt; Also, you're a bit secretive about your private email addresses. &lt;% end %&gt; &lt;/p&gt; &lt;/body&gt; &lt;/html&gt;  From the command line, call ruby advanced_server.rb, which starts up your server on port 4567 -- the same port we used when we had a simple Sinatra app. When you navigate to http://localhost:4567, the app calls authenticate! which redirects you to /callback. /callback then sends us back to /, and since we've been authenticated, renders advanced.erb. We could completely simplify this roundtrip routing by simply changing our callback URL in GitHub to /. But, since both server.rb and advanced.rb are relying on the same callback URL, we've got to do a little bit of wonkiness to make it work. Also, if we had never authorized this application to access our GitHub data, we would've seen the same confirmation dialog from earlier pop-up and warn us. If you'd like, you can play around with yet another Sinatra-GitHub auth example available as a separate project."
  },
  
  
  {
    "title": "Best practices for integrators",
    
    "url": "/guides/best-practices-for-integrators/",
    "body": " Best practices for integrators Interested in integrating with the GitHub platform? You're in good company. This guide will help you build an app that provides the best experience for your users and ensure that it's reliably interacting with the API.  Secure payloads delivered from GitHub Favor asynchronous work over synchronous Use appropriate HTTP status codes when responding to GitHub Provide as much information as possible to the user Follow any redirects that the API sends you Don't manually parse URLs Dealing with rate limits Dealing with abuse rate limits Dealing with API errors   Secure payloads delivered from GitHub It's very important that you secure the payloads sent from GitHub. Although no personal information (like passwords) is ever transmitted in a payload, leaking any information is not good. Some information that might be sensitive include committer email address or the names of private repositories. There are three steps you can take to secure receipt of payloads delivered by GitHub:  Ensure that your receiving server is on an HTTPS connection. By default, GitHub will verify SSL certificates when delivering payloads. You can whitelist the IP address we use when delivering hooks to your server. To ensure that you're always checking the right IP address, you can use the /meta endpoint to find the address we use. Provide a secret token to ensure payloads are definitely coming from GitHub. By enforcing a secret token, you're ensuring that any data received by your server is absolutely coming from GitHub. Ideally, you should provide a different secret token per user of your service. That way, if one token is compromised, no other user would be affected.   Favor asynchronous work over synchronous GitHub expects that integrations respond within thirty seconds of receiving the webhook payload. If your service takes longer than that to complete, then GitHub terminates the connection and the payload is lost. Since it's impossible to predict how fast your service will complete, you should do all of \"the real work\" in a background job. Resque (for Ruby), RQ (for Python), or RabbitMQ (for Java) are examples of libraries that can handle queuing and processing of background jobs. Note that even with a background job running, GitHub still expects your server to respond within thirty seconds. Your server simply needs to acknowledge that it received the payload by sending some sort of response. It's critical that your service to performs any validations on a payload as soon as possible, so that you can accurately report whether your server will continue with the request or not.  Use appropriate HTTP status codes when responding to GitHub Every webhook has its own \"Recent Deliveries\" section, which lists whether a deployment was successful or not.  You should make use of proper HTTP status codes in order to inform users. You can use codes like 201 or 202 to acknowledge receipt of payload that won't be processed (for example, a payload delivered by a branch that's not the default). Reserve the 500 error code for catastrophic failures.  Provide as much information as possible to the user Users can dig into the server responses you send back to GitHub. Ensure that your messages are clear and informative.   Follow any redirects that the API sends you GitHub is explicit in telling you when a resource has moved by providing a redirect status code. You should follow these redirections. Every redirect response sets the Location header with the new URI to go to. If you receive a redirect, it's best to update your code to follow the new URI, in case you're requesting a deprecated path that we might remove. We've provided a list of HTTP status codes to watch out for when designing your app to follow redirects.  Don't manually parse URLs Often, API responses contain data in the form of URLs. For example, when requesting a repository, we'll send a key called clone_url with a URL you can use to clone the repository. For the stability of your app, you shouldn't try to parse this data or try to guess and construct the format of future URLs. Your app is liable to break if we decide to change the URL. For example, when working with paginated results, it's often tempting to construct URLs that append ?page=&lt;number&gt; to the end. Avoid that temptation. Our guide on pagination offers some safe tips on dependably following paginated results.  Dealing with rate limits The GitHub API rate limit ensures that the API is fast and available for everyone. If you hit a rate limit, it's expected that you back off from making requests and try again later when you're permitted to do so. Failure to do so may result in the banning of your app. You can always check your rate limit status at any time. Checking your rate limit incurs no cost against your rate limit.  Dealing with abuse rate limits Abuse rate limits are another way we ensure the API's availability. To avoid hitting this limit, you should ensure your application follows the guidelines below.  Make authenticated requests, or use your application's client ID and secret. Unauthenticated requests are subject to more aggressive abuse rate limiting. Make requests for a single user or client ID serially. Do not make requests for a single user or client ID concurrently. If you're making a large number of POST, PATCH, PUT, or DELETE requests for a single user or client ID, wait at least one second between each request. Requests that create content which triggers notifications, such as issues, comments and pull requests, may be further limited. Please create this content at a reasonable pace to avoid further limiting. When you have been limited, wait the number of seconds specified in the Retry-After response header.  We reserve the right to change these guidelines as needed to ensure availability.  Dealing with API errors Although your code would never introduce a bug, you may find that you've encountered successive errors when trying to access the API. Rather than ignore repeated 4xx and 5xx status codes, you should ensure that you're correctly interacting with the API. For example, if an endpoint requests a string and you're passing it a numeric value, you're going to receive a 5xx validation error, and your call won't succeed. Similarly, attempting to access an unauthorized or nonexistent endpoint will result in a 4xx error. Intentionally ignoring repeated validation errors may result in the suspension of your app for abuse."
  },
  
  
  {
    "title": "Building a CI server",
    
    "url": "/guides/building-a-ci-server/",
    "body": " Building a CI server  Writing your server Working with statuses Conclusion  The Status API is responsible for tying together commits with a testing service, so that every push you make can be tested and represented in a GitHub pull request. This guide will use that API to demonstrate a setup that you can use. In our scenario, we will:  Run our CI suite when a Pull Request is opened (we'll set the CI status to pending). When the CI is finished, we'll set the Pull Request's status accordingly.  Our CI system and host server will be figments of our imagination. They could be Travis, Jenkins, or something else entirely. The crux of this guide will be setting up and configuring the server managing the communication. If you haven't already, be sure to download ngrok, and learn how to use it. We find it to be a very useful tool for exposing local connections. Note: you can download the complete source code for this project from the platform-samples repo.  Writing your server We'll write a quick Sinatra app to prove that our local connections are working. Let's start with this: require 'sinatra' require 'json' post '/event_handler' do payload = JSON.parse(params[:payload]) \"Well, it worked!\" end  (If you're unfamiliar with how Sinatra works, we recommend reading the Sinatra guide.) Start this server up. By default, Sinatra starts on port 4567, so you'll want to configure ngrok to start listening for that, too. In order for this server to work, we'll need to set a repository up with a webhook. The webhook should be configured to fire whenever a Pull Request is created, or merged. Go ahead and create a repository you're comfortable playing around in. Might we suggest @octocat's Spoon/Knife repository? After that, you'll create a new webhook in your repository, feeding it the URL that ngrok gave you, and choosing application/x-www-form-urlencoded as the content type:  Click Update webhook. You should see a body response of Well, it worked!. Great! Click on Let me select individual events, and select the following:  Status Pull Request  These are the events GitHub will send to our server whenever the relevant action occurs. Let's update our server to just handle the Pull Request scenario right now: post '/event_handler' do @payload = JSON.parse(params[:payload]) case request.env['HTTP_X_GITHUB_EVENT'] when \"pull_request\" if @payload[\"action\"] == \"opened\" process_pull_request(@payload[\"pull_request\"]) end end end helpers do def process_pull_request(pull_request) puts \"It's #{pull_request['title']}\" end end  What's going on? Every event that GitHub sends out attached a X-GitHub-Event HTTP header. We'll only care about the PR events for now. From there, we'll take the payload of information, and return the title field. In an ideal scenario, our server would be concerned with every time a pull request is updated, not just when it's opened. That would make sure that every new push passes the CI tests. But for this demo, we'll just worry about when it's opened. To test out this proof-of-concept, make some changes in a branch in your test repository, and open a pull request. Your server should respond accordingly!  Working with statuses With our server in place, we're ready to start our first requirement, which is setting (and updating) CI statuses. Note that at any time you update your server, you can click Redeliver to send the same payload. There's no need to make a new pull request every time you make a change! Since we're interacting with the GitHub API, we'll use Octokit.rb to manage our interactions. We'll configure that client with a personal access token: # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below ACCESS_TOKEN = ENV['MY_PERSONAL_TOKEN'] before do @client ||= Octokit::Client.new(:access_token =&gt; ACCESS_TOKEN) end  After that, we'll just need to update the pull request on GitHub to make clear that we're processing on the CI: def process_pull_request(pull_request) puts \"Processing pull request...\" @client.create_status(pull_request['base']['repo']['full_name'], pull_request['head']['sha'], 'pending') end  We're doing three very basic things here:  we're looking up the full name of the repository we're looking up the last SHA of the pull request we're setting the status to \"pending\"  That's it! From here, you can run whatever process you need to in order to execute your test suite. Maybe you're going to pass off your code to Jenkins, or call on another web service via its API, like Travis. After that, you'd be sure to update the status once more. In our example, we'll just set it to \"success\": def process_pull_request(pull_request) @client.create_status(pull_request['base']['repo']['full_name'], pull_request['head']['sha'], 'pending') sleep 2 # do busy work... @client.create_status(pull_request['base']['repo']['full_name'], pull_request['head']['sha'], 'success') puts \"Pull request processed!\" end   Conclusion At GitHub, we've used a version of Janky to manage our CI for years. The basic flow is essentially the exact same as the server we've built above. At GitHub, we:  Fire to Jenkins when a pull request is created or updated (via Janky) Wait for a response on the state of the CI If the code is green, we merge the pull request  All of this communication is funneled back to our chat rooms. You don't need to build your own CI setup to use this example. You can always rely on third-party services."
  },
  
  
  {
    "title": "Delivering deployments",
    
    "url": "/guides/delivering-deployments/",
    "body": " Delivering deployments  Writing your server Working with deployments Conclusion  The Deployments API provides your projects hosted on GitHub with the capability to launch them on a server that you own. Combined with the Status API, you'll be able to coordinate your deployments the moment your code lands on master. This guide will use that API to demonstrate a setup that you can use. In our scenario, we will:  Merge a Pull Request When the CI is finished, we'll set the Pull Request's status accordingly. When the Pull Request is merged, we'll run our deployment to our server.  Our CI system and host server will be figments of our imagination. They could be Heroku, Amazon, or something else entirely. The crux of this guide will be setting up and configuring the server managing the communication. If you haven't already, be sure to download ngrok, and learn how to use it. We find it to be a very useful tool for exposing local connections. Note: you can download the complete source code for this project from the platform-samples repo.  Writing your server We'll write a quick Sinatra app to prove that our local connections are working. Let's start with this: require 'sinatra' require 'json' post '/event_handler' do payload = JSON.parse(params[:payload]) \"Well, it worked!\" end  (If you're unfamiliar with how Sinatra works, we recommend reading the Sinatra guide.) Start this server up. By default, Sinatra starts on port 4567, so you'll want to configure ngrok to start listening for that, too. In order for this server to work, we'll need to set a repository up with a webhook. The webhook should be configured to fire whenever a Pull Request is created, or merged. Go ahead and create a repository you're comfortable playing around in. Might we suggest @octocat's Spoon/Knife repository? After that, you'll create a new webhook in your repository, feeding it the URL that ngrok gave you, and choosing application/x-www-form-urlencoded as the content type:  Click Update webhook. You should see a body response of Well, it worked!. Great! Click on Let me select individual events., and select the following:  Deployment Deployment status Pull Request  These are the events GitHub will send to our server whenever the relevant action occurs. We'll configure our server to just handle when Pull Requests are merged right now: post '/event_handler' do @payload = JSON.parse(params[:payload]) case request.env['HTTP_X_GITHUB_EVENT'] when \"pull_request\" if @payload[\"action\"] == \"closed\" &amp;&amp; @payload[\"pull_request\"][\"merged\"] puts \"A pull request was merged! A deployment should start now...\" end end end  What's going on? Every event that GitHub sends out attached a X-GitHub-Event HTTP header. We'll only care about the PR events for now. When a pull request is merged (its state is closed, and merged is true), we'll kick off a deployment. To test out this proof-of-concept, make some changes in a branch in your test repository, open a pull request, and merge it. Your server should respond accordingly!  Working with deployments With our server in place, the code being reviewed, and our pull request merged, we want our project to be deployed. We'll start by modifying our event listener to process pull requests when they're merged, and start paying attention to deployments: when \"pull_request\" if @payload[\"action\"] == \"closed\" &amp;&amp; @payload[\"pull_request\"][\"merged\"] start_deployment(@payload[\"pull_request\"]) end when \"deployment\" process_deployment(@payload) when \"deployment_status\" update_deployment_status end  Based on the information from the pull request, we'll start by filling out the start_deployment method: def start_deployment(pull_request) user = pull_request['user']['login'] payload = JSON.generate(:environment =&gt; 'production', :deploy_user =&gt; user) @client.create_deployment(pull_request['head']['repo']['full_name'], pull_request['head']['sha'], {:payload =&gt; payload, :description =&gt; \"Deploying my sweet branch\"}) end  Deployments can have some metadata attached to them, in the form of a payload and a description. Although these values are optional, it's helpful to use for logging and representing information. When a new deployment is created, a completely separate event is trigged. That's why we have a new switch case in the event handler for deployment. You can use this information to be notified when a deployment has been triggered. Deployments can take a rather long time, so we'll want to listen for various events, such as when the deployment was created, and what state it's in. Let's simulate a deployment that does some work, and notice the effect it has on the output. First, let's complete our process_deployment method: def process_deployment payload = JSON.parse(@payload['payload']) # you can send this information to your chat room, monitor, pager, e.t.c. puts \"Processing '#{@payload['description']}' for #{payload['deploy_user']} to #{payload['environment']}\" sleep 2 # simulate work @client.create_deployment_status(\"repos/#{@payload['repository']['full_name']}/deployments/#{@payload['id']}\", 'pending') sleep 2 # simulate work @client.create_deployment_status(\"repos/#{@payload['repository']['full_name']}/deployments/#{@payload['id']}\", 'success') end  Finally, we'll simulate storing the status information as console output: def update_deployment_status puts \"Deployment status for #{@payload['id']} is #{@payload['state']}\" end  Let's break down what's going on. A new deployment is created by start_deployment, which triggers the deployment event. From there, we call process_deployment to simulate work that's going on. During that processing, we also make a call to create_deployment_status, which lets a receiver know what's going on, as we switch the status to pending. After the deployment is finished, we set the status to success. You'll notice that this pattern is the exact same as when we you your CI statuses.  Conclusion At GitHub, we've used a version of Heaven to manage our deployments for years. The basic flow is essentially the exact same as the server we've built above. At GitHub, we:  Wait for a response on the state of the CI If the code is green, we merge the pull request Heaven takes the merged code, and deploys it to our production and staging servers In the meantime, Heaven also notifies everyone about the build, via Hubot sitting in our chat rooms  That's it! You don't need to build your own deployment setup to use this example. You can always rely on third-party services."
  },
  
  
  {
    "title": "Discovering resources for a user",
    
    "url": "/guides/discovering-resources-for-a-user/",
    "body": " Discovering resources for a user  Getting started Discover the repositories that your app can access for a user Discover the organizations that your app can access for a user  When making authenticated requests to the GitHub API, applications often need to fetch the current user's repositories and organizations. In this guide, we'll explain how to reliably discover those resources. To interact with the GitHub API, we'll be using Octokit.rb. You can find the complete source code for this project in the platform-samples repository.  Getting started If you haven't already, you should read the \"Basics of Authentication\" guide before working through the examples below. The examples below assume that you have registered an OAuth application and that your application has an OAuth token for a user.  Discover the repositories that your app can access for a user In addition to having their own personal repositories, a user may be a collaborator on repositories owned by other users and organizations. Collectively, these are the repositories where the user has privileged access: either it's a private repository where the user has read or write access, or it's a public repository where the user has write access. OAuth scopes and organization application policies determine which of those repositories your app can access for a user. Use the workflow below to discover those repositories. As always, first we'll require GitHub's Octokit.rb Ruby library. Then we'll configure Octokit.rb to automatically handle pagination for us. require 'octokit' Octokit.auto_paginate = true  Next, we'll pass in our application's OAuth token for a given user: # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below. client = Octokit::Client.new :access_token =&gt; ENV[\"OAUTH_ACCESS_TOKEN\"]  Then, we're ready to fetch the repositories that our application can access for the user: client.repositories.each do |repository| full_name = repository[:full_name] has_push_access = repository[:permissions][:push] access_type = if has_push_access \"write\" else \"read-only\" end puts \"User has #{access_type} access to #{full_name}.\" end   Discover the organizations that your app can access for a user Applications can perform all sorts of organization-related tasks for a user. To perform these tasks, the app needs an OAuth authorization with sufficient permission. For example, the read:org scope allows you to list teams, and the user scope lets you publicize the user’s organization membership. Once a user has granted one or more of these scopes to your app, you're ready to fetch the user’s organizations. Just as we did when discovering repositories above, we'll start by requiring GitHub's Octokit.rb Ruby library and configuring it to take care of pagination for us: require 'octokit' Octokit.auto_paginate = true  Next, we'll pass in our application's OAuth token for a given user to initialize our API client: # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below. client = Octokit::Client.new :access_token =&gt; ENV[\"OAUTH_ACCESS_TOKEN\"]  Then, we can list the organizations that our application can access for the user: client.organizations.each do |organization| puts \"User belongs to the #{organization[:login]} organization.\" end   Don’t rely on public organizations If you've read the docs from cover to cover, you may have noticed an API method for listing a user's public organization memberships. Most applications should avoid this API method. This method only returns the user's public organization memberships, not their private organization memberships. As an application, you typically want all of the user's organizations (public and private) that your app is authorized to access. The workflow above will give you exactly that."
  },
  
  
  {
    "title": "Getting Started",
    
    "url": "/guides/getting-started/",
    "body": " Getting Started  Overview Authentication Repositories Issues Conditional requests  Let's walk through core API concepts as we tackle some everyday use cases.  Overview Most applications will use an existing wrapper library in the language of your choice, but it's important to familiarize yourself with the underlying API HTTP methods first. There's no easier way to kick the tires than through cURL.  Hello World Let's start by testing our setup. Open up a command prompt and enter the following command:  curl https://api.github.com/zen Keep it logically awesome.  The response will be a random selection from our design philosophies. Next, let's GET Chris Wanstrath's GitHub profile:  # GET /users/defunkt curl https://api.github.com/users/defunkt {  \"login\": \"defunkt\",  \"id\": 2,  \"url\": \"https://api.github.com/users/defunkt\",  \"html_url\": \"https://github.com/defunkt\",  ... }  Mmmmm, tastes like JSON. Let's add the -i flag to include headers:  curl -i https://api.github.com/users/defunkt HTTP/1.1 200 OK Server: GitHub.com Date: Sun, 11 Nov 2012 18:43:28 GMT Content-Type: application/json; charset=utf-8 Connection: keep-alive Status: 200 OK ETag: \"bfd85cbf23ac0b0c8a29bee02e7117c6\" X-RateLimit-Limit: 60 X-RateLimit-Remaining: 57 X-RateLimit-Reset: 1352660008 X-GitHub-Media-Type: github.v3 Vary: Accept Cache-Control: public, max-age=60, s-maxage=60 X-Content-Type-Options: nosniff Content-Length: 692 Last-Modified: Tue, 30 Oct 2012 18:58:42 GMT {  \"login\": \"defunkt\",  \"id\": 2,  \"url\": \"https://api.github.com/users/defunkt\",  \"html_url\": \"https://github.com/defunkt\",  ... }  There are a few interesting bits in the response headers. As expected, the Content-Type is application/json. Any headers beginning with X- are custom headers, and are not included in the HTTP spec. Let's take a look at a few of them:   X-GitHub-Media-Type has a value of github.v3. This lets us know the media type for the response. Media types have helped us version our output in API v3. We'll talk more about that later. Take note of the X-RateLimit-Limit and X-RateLimit-Remaining headers. This pair of headers indicate how many requests a client can make in a rolling time period (typically an hour) and how many of those requests the client has already spent.   Authentication Unauthenticated clients can make 60 requests per hour. To get more, we'll need to authenticate. In fact, doing anything interesting with the GitHub API requires authentication.  Basic The easiest way to authenticate with the GitHub API is by simply using your GitHub username and password via Basic Authentication.  curl -i -u your_username https://api.github.com/users/defunkt Enter host password for user your_username:  The -u flag sets the username, and cURL will prompt you for the password. You can use -u \"username:password\" to avoid the prompt, but this leaves your password in shell history and isn't recommended. When authenticating, you should see your rate limit bumped to 5,000 requests an hour, as indicated in the X-RateLimit-Limit header. In addition to just getting more calls per hour, authentication is the key to reading and writing private information via the API.  Two-factor authentication If you have two-factor authentication enabled, the API will return a 401 Unauthorized error code for the above request (and every other API request):  curl -i -u your_username https://api.github.com/users/defunkt Enter host password for user your_username: HTTP/1.1 401 Unauthorized X-GitHub-OTP: required; :2fa-type {  \"message\": \"Must specify two-factor authentication OTP code.\",  \"documentation_url\": \"https://developer.github.com/v3/auth#working-with-two-factor-authentication\" }  The easiest way to get around that error is to create an OAuth token and use OAuth authentication instead of Basic Authentication. See the OAuth section below for more information.  Get your own user profile When properly authenticated, you can take advantage of the permissions associated with your GitHub account. For example, try getting your own user profile:  curl -i -u your_username https://api.github.com/user {  ...  \"plan\": {  \"space\": 2516582,  \"collaborators\": 10,  \"private_repos\": 20,  \"name\": \"medium\"  }  ... }  This time, in addition to the same set of public information we retrieved for @defunkt earlier, you should also see the non-public information for your user profile. For example, you'll see a plan object in the response which gives details about the GitHub plan for the account.  OAuth While convenient, Basic Authentication isn't ideal because you shouldn't give your GitHub username and password to anyone. Applications that need to read or write private information using the API on behalf of another user should use OAuth. Instead of usernames and passwords, OAuth uses tokens. Tokens provide two big features:   Revokable access: users can revoke authorization to third party apps at any time  Limited access: users can review the specific access that a token will provide before authorizing a third party app  Normally, tokens are created via a web flow. An application sends users to GitHub to log in. GitHub then presents a dialog indicating the name of the app, as well as the level of access the app has once it's authorized by the user. After a user authorizes access, GitHub redirects the user back to the application:  However, you don't need to set up the entire web flow to begin working with OAuth tokens. An easier way to get a token is to create a personal access token via your Personal access tokens settings page:  Also, the Authorizations API makes it simple to use Basic Authentication to create an OAuth token. Try pasting and running the following command:  curl -i -u your_username -d '{\"scopes\": [\"repo\", \"user\"], \"note\": \"getting-started\"}' \\  https://api.github.com/authorizations HTTP/1.1 201 Created Location: https://api.github.com/authorizations/2 Content-Length: 384 {  \"scopes\": [  \"repo\",  \"user\"  ],  \"token\": \"5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4\",  \"updated_at\": \"2012-11-14T14:04:24Z\",  \"url\": \"https://api.github.com/authorizations/2\",  \"app\": {  \"url\": \"https://developer.github.com/v3/oauth/#oauth-authorizations-api\",  \"name\": \"GitHub API\"  },  \"created_at\": \"2012-11-14T14:04:24Z\",  \"note_url\": null,  \"id\": 2,  \"note\": \"getting-started\" }  There's a lot going on in this one little call, so let's break it down. First, the -d flag indicates we're doing a POST, using the application/x-www-form-urlencoded content type (as opposed to GET). All POST requests to the GitHub API should be in JSON. Next, let's look at the scopes we're sending over in this call. When creating a new token, we include an optional array of scopes, or access levels, that indicate what information this token can access. In this case, we're setting up the token with repo access, which grants access to read and write to public and private repositories, and user scope, which grants read and write access to public and private user profile data. See the scopes docs for a full list of scopes. You should only request scopes that your application actually needs, in order to not frighten users with potentially invasive actions. The 201 status code tells us that the call was successful, and the JSON returned contains the details of our new OAuth token. If you have two-factor authentication enabled, the API will return the previously described 401 Unauthorized error code for the above request. You can get around that error by providing a 2FA OTP code in the X-GitHub-OTP request header:  curl -i -u your_username -H \"X-GitHub-OTP: your_2fa_OTP_code\" \\ -d '{\"scopes\": [\"repo\", \"user\"], \"note\": \"getting-started\"}' \\ https://api.github.com/authorizations  If you enabled 2FA with a mobile application, go ahead and get an OTP code from your one-time password application on your phone. If you enabled 2FA with text messages, you'll receive an SMS with your OTP code after making a request to this endpoint. Now, we can use the forty character token instead of a username and password in the rest of our examples. Let's grab our own user info again, using OAuth this time:  curl -i -H 'Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4' \\ https://api.github.com/user  Treat OAuth tokens like passwords! Don't share them with other users or store them in insecure places. The tokens in these examples are fake and the names have been changed to protect the innocent. Now that we've got the hang of making authenticated calls, let's move along to the Repositories API.  Repositories Almost any meaningful use of the GitHub API will involve some level of Repository information. We can GET repository details in the same way we fetched user details earlier:  curl -i https://api.github.com/repos/twbs/bootstrap  In the same way, we can view repositories for the authenticated user:  curl -i -H 'Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4' \\ https://api.github.com/user/repos  Or, we can list repositories for another user:  curl -i https://api.github.com/users/technoweenie/repos  Or, we can list repositories for an organization:  curl -i https://api.github.com/orgs/mozilla/repos  The information returned from these calls will depend on how we authenticate:  Using Basic Authentication, the response includes all repositories the the user has access to see on github.com. Using OAuth, private repositories are only returned if the OAuth token contains the repo scope.  As the docs indicate, these methods take a type parameter that can filter the repositories returned based on what type of access the user has for the repository. In this way, we can fetch only directly-owned repositories, organization repositories, or repositories the user collaborates on via a team.  curl -i \"https://api.github.com/users/technoweenie/repos?type=owner\"  In this example, we grab only those repositories that technoweenie owns, not the ones on which he collaborates. Note the quoted URL above. Depending on your shell setup, cURL sometimes requires a quoted URL or else it ignores the query string.  Create a repository Fetching information for existing repositories is a common use case, but the GitHub API supports creating new repositories as well. To create a repository, we need to POST some JSON containing the details and configuration options.  curl -i -H 'Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4' \\ -d '{ \\ \"name\": \"blog\", \\ \"auto_init\": true, \\ \"private\": true, \\ \"gitignore_template\": \"nanoc\" \\ }' \\ https://api.github.com/user/repos  In this minimal example, we create a new repository for our blog (to be served on GitHub Pages, perhaps). Though the blog will be public, we've made the repository private. In this single step, we'll also initialize it with a README and a nanoc-flavored [.gitignore template]gitignore templates. The resulting repository will be found at https://github.com/&lt;your_username&gt;/blog. To create a repository under an organization for which you're an owner, just change the API method from /user/repos to /orgs/&lt;org_name&gt;/repos. Next, let's fetch our newly created repository:  curl -i https://api.github.com/repos/pengwynn/blog HTTP/1.1 404 Not Found {  \"message\": \"Not Found\" }  Oh noes! Where did it go? Since we created the repository as private, we need to authenticate in order to see it. If you're a grizzled HTTP user, you might expect a 403 instead. Since we don't want to leak information about private repositories, the GitHub API returns a 404 in this case, as if to say \"we can neither confirm nor deny the existence of this repository.\"  Issues The UI for Issues on GitHub aims to provide 'just enough' workflow while staying out of your way. With the GitHub Issues API, you can pull data out or create issues from other tools to create a workflow that works for your team. Just like github.com, the API provides a few methods to view issues for the authenticated user. To see all your issues, call GET /issues:  curl -i -H 'Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4' \\ https://api.github.com/issues  To get only the issues under one of your GitHub organizations, call GET /orgs/&lt;org&gt;/issues:  curl -i -H 'Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4' \\ https://api.github.com/orgs/rails/issues  We can also get all the issues under a single repository:  curl -i https://api.github.com/repos/rails/rails/issues   Pagination A project the size of Rails has thousands of issues. We'll need to paginate, making multiple API calls to get the data. Let's repeat that last call, this time taking note of the response headers:  curl -i https://api.github.com/repos/rails/rails/issues HTTP/1.1 200 OK ... Link: &lt;https://api.github.com/repositories/8514/issues?page=2&gt;; rel=\"next\", &lt;https://api.github.com/repositories/8514/issues?page=30&gt;; rel=\"last\" ...  The Link header provides a way for a response to link to external resources, in this case additional pages of data. Since our call found more than thirty issues (the default page size), the API tells us where we can find the next page and the last page of results.  Creating an issue Now that we've seen how to paginate lists of issues, let's create an issue from the API. To create an issue, we need to be authenticated, so we'll pass an OAuth token in the header. Also, we'll pass the title, body, and labels in the JSON body to the /issues path underneath the repository in which we want to create the issue:  curl -i -H 'Authorization: token 5199831f4dd3b79e7c5b7e0ebe75d67aa66e79d4' \\  -d '{ \\  \"title\": \"New logo\", \\  \"body\": \"We should have one\", \\  \"labels\": [\"design\"] \\  }' \\  https://api.github.com/repos/pengwynn/api-sandbox/issues HTTP/1.1 201 Created Location: https://api.github.com/repos/pengwynn/api-sandbox/issues/17 X-RateLimit-Limit: 5000 {  \"pull_request\": {  \"patch_url\": null,  \"html_url\": null,  \"diff_url\": null  },  \"created_at\": \"2012-11-14T15:25:33Z\",  \"comments\": 0,  \"milestone\": null,  \"title\": \"New logo\",  \"body\": \"We should have one\",  \"user\": {  \"login\": \"pengwynn\",  \"gravatar_id\": \"7e19cd5486b5d6dc1ef90e671ba52ae0\",  \"avatar_url\": \"https://secure.gravatar.com/avatar/7e19cd5486b5d6dc1ef90e671ba52ae0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\",  \"id\": 865,  \"url\": \"https://api.github.com/users/pengwynn\"  },  \"closed_at\": null,  \"updated_at\": \"2012-11-14T15:25:33Z\",  \"number\": 17,  \"closed_by\": null,  \"html_url\": \"https://github.com/pengwynn/api-sandbox/issues/17\",  \"labels\": [  {  \"color\": \"ededed\",  \"name\": \"design\",  \"url\": \"https://api.github.com/repos/pengwynn/api-sandbox/labels/design\"  }  ],  \"id\": 8356941,  \"assignee\": null,  \"state\": \"open\",  \"url\": \"https://api.github.com/repos/pengwynn/api-sandbox/issues/17\" }  The response gives us a couple of pointers to the newly created issue, both in the Location response header and the url field of the JSON response.  Conditional requests A big part of being a good API citizen is respecting rate limits by caching information that hasn't changed. The API supports conditional requests and helps you do the right thing. Consider the first call we made to get defunkt's profile:  curl -i https://api.github.com/users/defunkt HTTP/1.1 200 OK ETag: \"bfd85cbf23ac0b0c8a29bee02e7117c6\"  In addition to the JSON body, take note of the HTTP status code of 200 and the ETag header. The ETag is a fingerprint of the response. If we pass that on subsequent calls, we can tell the API to give us the resource again, only if it has changed:  curl -i -H 'If-None-Match: \"bfd85cbf23ac0b0c8a29bee02e7117c6\"' \\  https://api.github.com/users/defunkt HTTP/1.1 304 Not Modified  The 304 status indicates that the resource hasn't changed since the last time we asked for it and the response will contain no body. As a bonus, 304 responses don't count against your rate limit. Woot! Now you know the basics of the GitHub API!  Basic &amp; OAuth authentication Fetching and creating repositories and issues Conditional requests  Keep learning with the next API guide Basics of Authentication!"
  },
  
  
  {
    "title": "Development Guides",
    
    "url": "/guides/index/",
    "body": " Development Guides This section of the documentation is intended to get you up-and-running with real-world GitHub API applications. We'll cover everything you need to know, from authentication, to manipulating results, to combining results with other services. Every tutorial here will have a project, and every project will be stored and documented in our public platform-samples repository. Feel free to fork, clone, and improve these guides. "
  },
  
  
  {
    "title": "Managing deploy keys",
    
    "url": "/guides/managing-deploy-keys/",
    "body": " Managing Deploy Keys  SSH agent forwarding HTTPS cloning with OAuth tokens Deploy keys Machine users  There are four ways to manage SSH keys on your servers when automating deployment scripts:  SSH agent forwarding HTTPS with OAuth tokens Deploy keys Machine users  This guide will help you decide what strategy is best for you.  SSH agent forwarding In many cases, especially in the beginning of a project, SSH agent forwarding is the quickest and simplest method to use. Agent forwarding uses the same SSH keys that your local development computer uses.  Pros  You do not have to generate or keep track of any new keys. There is no key management; users have the same permissions on the server that they do locally. No keys are stored on the server, so in case the server is compromised, you don't need to hunt down and remove the compromised keys.   Cons  Users must SSH in to deploy; automated deploy processes can't be used. SSH agent forwarding can be troublesome to run for Windows users.   Setup  Turn on agent forwarding locally. See our guide on SSH agent forwarding for more information. Set your deploy scripts to use agent forwarding. For example, on a bash script, enabling agent forwarding would look something like this: ssh -A serverA 'bash -s' &lt; deploy.sh    HTTPS cloning with OAuth tokens If you don't want to use SSH keys, you can use HTTPS with OAuth tokens.  Pros  Anyone with access to the server can deploy the repository. Users don't have to change their local SSH settings. Multiple tokens (one for each user) are not needed; one token per server is enough. A token can be revoked at any time, turning it essentially into a one-use password. Generating new tokens can be easily scripted using the OAuth API    Cons  You must make sure that you configure your token with the correct access scopes. Tokens are essentially passwords, and must be protected the same way.   Setup See our guide on Git automation with tokens.  Deploy keys A deploy key is an SSH key that is stored on your server and grants access to a single GitHub repository. This key is attached directly to the repository instead of to a personal user account.  Pros  Anyone with access to the repository and server has the ability to deploy the project. Users don't have to change their local SSH settings. Deploy keys can read and write by default, but can be made read-only.   Cons  Deploy keys only grant access to a single repository. More complex projects may have many repositories to pull to the same server. Deploy keys are usually not protected by a passphrase, making the key easily accessible if the server is compromised.   Setup   Run the ssh-keygen procedure on your server. In the top right corner of any GitHub page, click your profile photo.   On your profile page, click the Repositories tab, then click the name of your repository.   In your repository's right sidebar, click Settings.   In the sidebar, click Deploy Keys.   Click Add deploy key. Paste your public key in and submit.     Machine users If your server needs to access multiple repositories, you can choose to create a new GitHub account and attach an SSH key that will be used exclusively for automation. Since this GitHub account won't be used by a human, it's called a machine user. You can then add the machine user as collaborator or add the machine user to a team with access to the repositories it needs to manipulate. NOTE: Adding a machine user as a collaborator always grants read/write access. Adding a machine user to a team grants the permissions of the team.  Tip: Our terms of service do mention that 'Accounts registered by \"bots\" or other automated methods are not permitted.' and that 'One person or legal entity may not maintain more than one free account.' But don't fear, we won't send rabid lawyers out to hunt you down if you create a single machine user for your organization's deploy scripts. Creating a single machine user for your project or organization is totally cool.   Pros  Anyone with access to the repository and server has the ability to deploy the project. No (human) users need to change their local SSH settings. Multiple keys are not needed; one per server is adequate.   Cons  Only organizations have access to create teams; therefore only organizations can use them to restrict machine users to read-only access. Personal repositories always grant collaborators read/write access. Machine user keys, like deploy keys, are usually not protected by a passphrase.   Setup   Run the ssh-keygen procedure on your server and attach the public key to the machine user account. Give that account access to the repositories it will need to access. You can do this by adding the account as collaborator or adding it to a team in an organization. "
  },
  
  
  {
    "title": "Rendering Data as Graphs",
    
    "url": "/guides/rendering-data-as-graphs/",
    "body": " Rendering Data as Graphs  Setting up an OAuth application Fetching repository information Visualizing language counts Combining different API calls  In this guide, we're going to use the API to fetch information about repositories that we own, and the programming languages that make them up. Then, we'll visualize that information in a couple of different ways using the D3.js library. To interact with the GitHub API, we'll be using the excellent Ruby library, Octokit. If you haven't already, you should read the \"Basics of Authentication\" guide before starting this example. You can find the complete source code for this project in the platform-samples repository. Let's jump right in!  Setting up an OAuth application First, register a new application on GitHub. Set the main and callback URLs to http://localhost:4567/. As before, we're going to handle authentication for the API by implementing a Rack middleware using sinatra-auth-github: require 'sinatra/auth/github' module Example class MyGraphApp &lt; Sinatra::Base # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below # if ENV['GITHUB_CLIENT_ID'] &amp;&amp; ENV['GITHUB_CLIENT_SECRET'] # CLIENT_ID = ENV['GITHUB_CLIENT_ID'] # CLIENT_SECRET = ENV['GITHUB_CLIENT_SECRET'] # end CLIENT_ID = ENV['GH_GRAPH_CLIENT_ID'] CLIENT_SECRET = ENV['GH_GRAPH_SECRET_ID'] enable :sessions set :github_options, { :scopes =&gt; \"repo\", :secret =&gt; CLIENT_SECRET, :client_id =&gt; CLIENT_ID, :callback_url =&gt; \"/\" } register Sinatra::Auth::Github get '/' do if !authenticated? authenticate! else access_token = github_user[\"token\"] end end end end  Set up a similar config.ru file as in the previous example: ENV['RACK_ENV'] ||= 'development' require \"rubygems\" require \"bundler/setup\" require File.expand_path(File.join(File.dirname(__FILE__), 'server')) run Example::MyGraphApp   Fetching repository information This time, in order to talk to the GitHub API, we're going to use the Octokit Ruby library. This is much easier than directly making a bunch of REST calls. Plus, Octokit was developed by a GitHubber, and is actively maintained, so you know it'll work. Authentication with the API via Octokit is easy. Just pass your login and token to the Octokit::Client constructor: if !authenticated? authenticate! else octokit_client = Octokit::Client.new(:login =&gt; github_user.login, :oauth_token =&gt; github_user.token) end  Let's do something interesting with the data about our repositories. We're going to see the different programming languages they use, and count which ones are used most often. To do that, we'll first need a list of our repositories from the API. With Octokit, that looks like this: repos = client.repositories  Next, we'll iterate over each repository, and count the language that GitHub associates with it: language_obj = {} repos.each do |repo| # sometimes language can be nil if repo.language if !language_obj[repo.language] language_obj[repo.language] = 1 else language_obj[repo.language] += 1 end end end languages.to_s  When you restart your server, your web page should display something that looks like this: {\"JavaScript\"=&gt;13, \"PHP\"=&gt;1, \"Perl\"=&gt;1, \"CoffeeScript\"=&gt;2, \"Python\"=&gt;1, \"Java\"=&gt;3, \"Ruby\"=&gt;3, \"Go\"=&gt;1, \"C++\"=&gt;1}  So far, so good, but not very human-friendly. A visualization would be great in helping us understand how these language counts are distributed. Let's feed our counts into D3 to get a neat bar graph representing the popularity of the languages we use.  Visualizing language counts D3.js, or just D3, is a comprehensive library for creating many kinds of charts, graphs, and interactive visualizations. Using D3 in detail is beyond the scope of this guide, but for a good introductory article, check out \"D3 for Mortals\". D3 is a JavaScript library, and likes working with data as arrays. So, let's convert our Ruby hash into a JSON array for use by JavaScript in the browser. languages = [] language_obj.each do |lang, count| languages.push :language =&gt; lang, :count =&gt; count end erb :lang_freq, :locals =&gt; { :languages =&gt; languages.to_json}  We're simply iterating over each key-value pair in our object and pushing them into a new array. The reason we didn't do this earlier is because we didn't want to iterate over our language_obj object while we were creating it. Now, lang_freq.erb is going to need some JavaScript to support rendering a bar graph. For now, you can just use the code provided here, and refer to the resources linked above if you want to learn more about how D3 works: &lt;!DOCTYPE html&gt; &lt;meta charset=\"utf-8\"&gt; &lt;html&gt; &lt;head&gt; &lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/d3/3.0.1/d3.v3.min.js\"&gt;&lt;/script&gt; &lt;style&gt; svg { padding: 20px; } rect { fill: #2d578b } text { fill: white; } text.yAxis { font-size: 12px; font-family: Helvetica, sans-serif; fill: black; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Check this sweet data out:&lt;/p&gt; &lt;div id=\"lang_freq\"&gt;&lt;/div&gt; &lt;/body&gt; &lt;script&gt; var data = &lt;%= languages %&gt;; var barWidth = 40; var width = (barWidth + 10) * data.length; var height = 300; var x = d3.scale.linear().domain([0, data.length]).range([0, width]); var y = d3.scale.linear().domain([0, d3.max(data, function(datum) { return datum.count; })]). rangeRound([0, height]); // add the canvas to the DOM var languageBars = d3.select(\"#lang_freq\"). append(\"svg:svg\"). attr(\"width\", width). attr(\"height\", height); languageBars.selectAll(\"rect\"). data(data). enter(). append(\"svg:rect\"). attr(\"x\", function(datum, index) { return x(index); }). attr(\"y\", function(datum) { return height - y(datum.count); }). attr(\"height\", function(datum) { return y(datum.count); }). attr(\"width\", barWidth); languageBars.selectAll(\"text\"). data(data). enter(). append(\"svg:text\"). attr(\"x\", function(datum, index) { return x(index) + barWidth; }). attr(\"y\", function(datum) { return height - y(datum.count); }). attr(\"dx\", -barWidth/2). attr(\"dy\", \"1.2em\"). attr(\"text-anchor\", \"middle\"). text(function(datum) { return datum.count;}); languageBars.selectAll(\"text.yAxis\"). data(data). enter().append(\"svg:text\"). attr(\"x\", function(datum, index) { return x(index) + barWidth; }). attr(\"y\", height). attr(\"dx\", -barWidth/2). attr(\"text-anchor\", \"middle\"). text(function(datum) { return datum.language;}). attr(\"transform\", \"translate(0, 18)\"). attr(\"class\", \"yAxis\"); &lt;/script&gt; &lt;/html&gt;  Phew! Again, don't worry about what most of this code is doing. The relevant part here is a line way at the top--var data = &lt;%= languages %&gt;;--which indicates that we're passing our previously created languages array into ERB for manipulation. As the \"D3 for Mortals\" guide suggests, this isn't necessarily the best use of D3. But it does serve to illustrate how you can use the library, along with Octokit, to make some really amazing things.  Combining different API calls Now it's time for a confession: the language attribute within repositories only identifies the \"primary\" language defined. That means that if you have a repository that combines several languages, the one with the most bytes of code is considered to be the primary language. Let's combine a few API calls to get a true representation of which language has the greatest number of bytes written across all our code. A treemap should be a great way to visualize the sizes of our coding languages used, rather than simply the count. We'll need to construct an array of objects that looks something like this: [ { \"name\": \"language1\", \"size\": 100}, { \"name\": \"language2\", \"size\": 23} ... ]  Since we already have a list of repositories above, let's inspect each one, and call the language listing API method: repos.each do |repo| repo_name = repo.name repo_langs = octokit_client.languages(\"#{github_user.login}/#{repo_name}\") end  From there, we'll cumulatively add each language found to a \"master list\": repo_langs.each do |lang, count| if !language_obj[lang] language_obj[lang] = count else language_obj[lang] += count end end  After that, we'll format the contents into a structure that D3 understands: language_obj.each do |lang, count| language_byte_count.push :name =&gt; \"#{lang} (#{count})\", :count =&gt; count end # some mandatory formatting for D3 language_bytes = [ :name =&gt; \"language_bytes\", :elements =&gt; language_byte_count]  (For more information on D3 tree map magic, check out this simple tutorial.) To wrap up, we pass this JSON information over to the same ERB template: erb :lang_freq, :locals =&gt; { :languages =&gt; languages.to_json, :language_byte_count =&gt; language_bytes.to_json}  Like before, here's a bunch of JavaScript that you can drop directly into your template: &lt;div id=\"byte_freq\"&gt;&lt;/div&gt; &lt;script&gt; var language_bytes = &lt;%= language_byte_count %&gt; var childrenFunction = function(d){return d.elements}; var sizeFunction = function(d){return d.count;}; var colorFunction = function(d){return Math.floor(Math.random()*20)}; var nameFunction = function(d){return d.name;}; var color = d3.scale.linear() .domain([0,10,15,20]) .range([\"grey\",\"green\",\"yellow\",\"red\"]); drawTreemap(5000, 2000, '#byte_freq', language_bytes, childrenFunction, nameFunction, sizeFunction, colorFunction, color); function drawTreemap(height,width,elementSelector,language_bytes,childrenFunction,nameFunction,sizeFunction,colorFunction,colorScale){ var treemap = d3.layout.treemap() .children(childrenFunction) .size([width,height]) .value(sizeFunction); var div = d3.select(elementSelector) .append(\"div\") .style(\"position\",\"relative\") .style(\"width\",width + \"px\") .style(\"height\",height + \"px\"); div.data(language_bytes).selectAll(\"div\") .data(function(d){return treemap.nodes(d);}) .enter() .append(\"div\") .attr(\"class\",\"cell\") .style(\"background\",function(d){ return colorScale(colorFunction(d));}) .call(cell) .text(nameFunction); } function cell(){ this .style(\"left\",function(d){return d.x + \"px\";}) .style(\"top\",function(d){return d.y + \"px\";}) .style(\"width\",function(d){return d.dx - 1 + \"px\";}) .style(\"height\",function(d){return d.dy - 1 + \"px\";}); } &lt;/script&gt;  Et voila! Beautiful rectangles containing your repo languages, with relative proportions that are easy to see at a glance. You might need to tweak the height and width of your treemap, passed as the first two arguments to drawTreemap above, to get all the information to show up properly."
  },
  
  
  {
    "title": "Traversing with Pagination",
    
    "url": "/guides/traversing-with-pagination/",
    "body": " Traversing with Pagination  Basics of Pagination Consuming the information Constructing Pagination Links  The GitHub API provides a vast wealth of information for developers to consume. Most of the time, you might even find that you're asking for too much information, and in order to keep our servers happy, the API will automatically paginate the requested items. In this guide, we'll make some calls to the GitHub Search API, and iterate over the results using pagination. You can find the complete source code for this project in the platform-samples repository.  Basics of Pagination To start with, it's important to know a few facts about receiving paginated items:  Different API calls respond with different defaults. For example, a call to list GitHub's public repositories provides paginated items in sets of 30, whereas a call to the GitHub Search API provides items in sets of 100 You can specify how many items to receive (up to a maximum of 100); but, For technical reasons, not every endpoint behaves the same. For example, events won't let you set a maximum for items to receive. Be sure to read the documentation on how to handle paginated results for specific endpoints.  Information about pagination is provided in the Link header of an API call. For example, let's make a curl request to the search API, to find out how many times Mozilla projects use the phrase addClass:  curl -I \"https://api.github.com/search/code?q=addClass+user:mozilla\"  The -I parameter indicates that we only care about the headers, not the actual content. In examining the result, you'll notice some information in the Link header that looks like this: Link: &lt;https://api.github.com/search/code?q=addClass+user%3Amozilla&amp;page=2&gt;; rel=\"next\", &lt;https://api.github.com/search/code?q=addClass+user%3Amozilla&amp;page=34&gt;; rel=\"last\"  Let's break that down. rel=\"next\" says that the next page is page=2. This makes sense, since by default, all paginated queries start at page 1. rel=\"last\" provides some more information, stating that the last page of results is on page 34. Thus, we have 33 more pages of information about addClass that we can consume. Nice! Keep in mind that you should always rely on these link relations provided to you. Don't try to guess or construct your own URL. Some API calls, like listing commits on a repository, use pagination results that are based on SHA values, not numbers.  Navigating through the pages Now that you know how many pages there are to receive, you can start navigating through the pages to consume the results. You do this by passing in a page parameter. By default, page always starts at 1. Let's jump ahead to page 14 and see what happens:  curl -I \"https://api.github.com/search/code?q=addClass+user:mozilla&amp;page=14\"  Here's the link header once more: Link: &lt;https://api.github.com/search/code?q=addClass+user%3Amozilla&amp;page=15&gt;; rel=\"next\", &lt;https://api.github.com/search/code?q=addClass+user%3Amozilla&amp;page=34&gt;; rel=\"last\", &lt;https://api.github.com/search/code?q=addClass+user%3Amozilla&amp;page=1&gt;; rel=\"first\", &lt;https://api.github.com/search/code?q=addClass+user%3Amozilla&amp;page=13&gt;; rel=\"prev\"  As expected, rel=\"next\" is at 15, and rel=\"last\" is still 34. But now we've got some more information: rel=\"first\" indicates the URL for the first page, and more importantly, rel=\"prev\" lets you know the page number of the previous page. Using this information, you could construct some UI that lets users jump between the first, previous, next, or last list of results in an API call.  Changing the number of items received By passing the per_page parameter, you can specify how many items you want each page to return, up to 100 items. Let's try asking for 50 items about addClass:  curl -I \"https://api.github.com/search/code?q=addClass+user:mozilla&amp;per_page=50\"  Notice what it does to the header response: Link: &lt;https://api.github.com/search/code?q=addClass+user%3Amozilla&amp;per_page=50&amp;page=2&gt;; rel=\"next\", &lt;https://api.github.com/search/code?q=addClass+user%3Amozilla&amp;per_page=50&amp;page=20&gt;; rel=\"last\"  As you might have guessed, the rel=\"last\" information says that the last page is now 20. This is because we are asking for more information per page about our results.  Consuming the information You don't want to be making low-level curl calls just to be able to work with pagination, so let's write a little Ruby script that does everything we've just described above. As always, first we'll require GitHub's Octokit.rb Ruby library, and pass in our personal access token: require 'octokit' # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below client = Octokit::Client.new :access_token =&gt; ENV['MY_PERSONAL_TOKEN']  Next, we'll execute the search, using Octokit's search_code method. Unlike using curl, we can also immediately retrieve the number of results, so let's do that: results = client.search_code('addClass user:mozilla') total_count = results.total_count  Now, let's grab the number of the last page, similar to page=34&gt;; rel=\"last\" information in the link header. Octokit.rb support pagination information through an implementation called \"Hypermedia link relations.\" We won't go into detail about what that is, but, suffice to say, each element in the results variable has a hash called rels, which can contain information about :next, :last, :first, and :prev, depending on which result you're on. These relations also contain information about the resulting URL, by calling rels[:last].href. Knowing this, let's grab the page number of the last result, and present all this information to the user: last_response = client.last_response number_of_pages = last_response.rels[:last].href.match(/page=(\\d+)$/)[1] puts \"There are #{total_count} results, on #{number_of_pages} pages!\"  Finally, let's iterate through the results. You could do this with a loop for i in 1..number_of_pages.to_i, but instead, let's follow the rels[:next] headers to retrieve information from each page. For the sake of simplicity, let's just grab the file path of the first result from each page. To do this, we'll need a loop; and at the end of every loop, we'll retrieve the data set for the next page by following the rels[:next] information. The loop will finish when there is no rels[:next] information to consume (in other words, we are at rels[:last]). It might look something like this: puts last_response.data.items.first.path until last_response.rels[:next].nil? last_response = last_response.rels[:next].get puts last_response.data.items.first.path end  Changing the number of items per page is extremely simple with Octokit.rb. Simply pass a per_page options hash to the initial client construction. After that, your code should remain intact: require 'octokit' # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below client = Octokit::Client.new :access_token =&gt; ENV['MY_PERSONAL_TOKEN'] results = client.search_code('addClass user:mozilla', :per_page =&gt; 100) total_count = results.total_count last_response = client.last_response number_of_pages = last_response.rels[:last].href.match(/page=(\\d+)$/)[1] puts last_response.rels[:last].href puts \"There are #{total_count} results, on #{number_of_pages} pages!\" puts \"And here's the first path for every set\" puts last_response.data.items.first.path until last_response.rels[:next].nil? last_response = last_response.rels[:next].get puts last_response.data.items.first.path end   Constructing Pagination Links Normally, with pagination, your goal isn't to concatenate all of the possible results, but rather, to produce a set of navigation, like this:  Let's sketch out a micro-version of what that might entail. From the code above, we already know we can get the number_of_pages in the paginated results from the first call: require 'octokit' # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below client = Octokit::Client.new :access_token =&gt; ENV['MY_PERSONAL_TOKEN'] results = client.search_code('addClass user:mozilla') total_count = results.total_count last_response = client.last_response number_of_pages = last_response.rels[:last].href.match(/page=(\\d+)$/)[1] puts last_response.rels[:last].href puts \"There are #{total_count} results, on #{number_of_pages} pages!\"  From there, we can construct a beautiful ASCII representation of the number boxes: numbers = \"\" for i in 1..number_of_pages.to_i numbers &lt;&lt; \"[#{i}] \" end puts numbers  Let's simulate a user clicking on one of these boxes, by constructing a random number: random_page = Random.new random_page = random_page.rand(1..number_of_pages.to_i) puts \"A User appeared, and clicked number #{random_page}!\"  Now that we have a page number, we can use Octokit to explicitly retrieve that individual page, by passing the :page option: clicked_results = client.search_code('addClass user:mozilla', :page =&gt; random_page)  If we wanted to get fancy, we could also grab the previous and next pages, in order to generate links for back (&lt;&lt;) and foward (&gt;&gt;) elements: prev_page_href = client.last_response.rels[:prev] ? client.last_response.rels[:prev].href : \"(none)\" next_page_href = client.last_response.rels[:next] ? client.last_response.rels[:next].href : \"(none)\" puts \"The prev page link is #{prev_page_href}\" puts \"The next page link is #{next_page_href}\" "
  },
  
  
  {
    "title": "Using SSH Agent Forwarding",
    
    "url": "/guides/using-ssh-agent-forwarding/",
    "body": " Using SSH agent forwarding  Setting up SSH agent forwarding Testing SSH agent forwarding Troubleshooting SSH agent forwarding  SSH agent forwarding can be used to make deploying to a server simple. It allows you to use your local SSH keys instead of leaving keys (without passphrases!) sitting on your server. If you've already set up an SSH key to interact with GitHub, you're probably familiar with ssh-agent. It's a program that runs in the background and keeps your key loaded into memory, so that you don't need to enter your passphrase every time you need to use the key. The nifty thing is, you can choose to let servers access your local ssh-agent as if they were already running on the server. This is sort of like asking a friend to enter their password so that you can use their computer. Check out Steve Friedl's Tech Tips guide for a more detailed explanation of SSH agent forwarding.  Setting up SSH agent forwarding Ensure that your own SSH key is set up and working. You can use our guide on generating SSH keys if you've not done this yet. You can test that your local key works by entering ssh -T git@github.com in the terminal:  ssh -T git@github.com # Attempt to SSH in to github Hi username! You've successfully authenticated, but GitHub does not provide shell access.  We're off to a great start. Let's set up SSH to allow agent forwarding to your server.  Using your favorite text editor, open up the file at ~/.ssh/config. If this file doesn't exist, you can create it by entering touch ~/.ssh/config in the terminal.  Enter the following text into the file, replacing example.com with your server's domain name or IP: Host example.com ForwardAgent yes     Warning: You may be tempted to use a wildcard like Host * to just apply this setting to all SSH connections. That's not really a good idea, as you'd be sharing your local SSH keys with every server you SSH into. They won't have direct access to the keys, but they will be able to use them as you while the connection is established. You should only add servers you trust and that you intend to use with agent forwarding.   Testing SSH agent forwarding To test that agent forwarding is working with your server, you can SSH into your server and run ssh -T git@github.com once more. If all is well, you'll get back the same prompt as you did locally. If you're unsure if your local key is being used, you can also inspect the SSH_AUTH_SOCK variable on your server:  echo \"$SSH_AUTH_SOCK\" # Print out the SSH_AUTH_SOCK variable /tmp/ssh-4hNGMk8AZX/agent.79453  If the variable is not set, it means that agent forwarding is not working:  echo \"$SSH_AUTH_SOCK\" # Print out the SSH_AUTH_SOCK variable [No output] ssh -T git@github.com # Try to SSH to github Permission denied (publickey).   Troubleshooting SSH agent forwarding Here are some things to look out for when troubleshooting SSH agent forwarding.  You must be using an SSH URL to check out code SSH forwarding only works with SSH URLs, not HTTP(s) URLs. Check the .git/config file on your server and ensure the URL is an SSH-style URL like below:  [remote \"origin\"] url = git@github.com:yourAccount/yourProject.git fetch = +refs/heads/*:refs/remotes/origin/*   Your SSH keys must work locally Before you can make your keys work through agent forwarding, they must work locally first. Our guide on generating SSH keys can help you set up your SSH keys locally.  Your system must allow SSH agent forwarding Sometimes, system configurations disallow SSH agent forwarding. You can check if a system configuration file is being used by entering the following command in the terminal:  ssh -v example.com # Connect to example.com with verbose debug output OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011 debug1: Reading configuration data /Users/you/.ssh/config debug1: Applying options for example.com debug1: Reading configuration data /etc/ssh_config debug1: Applying options for * exit # Returns to your local command prompt  In the example above, the file ~/.ssh/config is loaded first, then /etc/ssh_config is read. We can inspect that file to see if it's overriding our options by running the following commands:  cat /etc/ssh_config # Print out the /etc/ssh_config file Host *  SendEnv LANG LC_*  ForwardAgent no  In this example, our /etc/ssh_config file specifically says ForwardAgent no, which is a way to block agent forwarding. Deleting this line from the file should get agent forwarding working once more.  Your server must allow SSH agent forwarding on inbound connections Agent forwarding may also be blocked on your server. You can check that agent forwarding is permitted by SSHing into the server and running sshd_config. The output from this command should indicate that AllowAgentForwarding is set.  Your local ssh-agent must be running On most computers, the operating system automatically launches ssh-agent for you. On Windows, however, you need to do this manually. We have a guide on how to start ssh-agent whenever you open Git Bash. To verify that ssh-agent is running on your computer, type the following command in the terminal:  echo \"$SSH_AUTH_SOCK\" # Print out the SSH_AUTH_SOCK variable /tmp/launch-kNSlgU/Listeners   Your key must be available to ssh-agent  You can check that your key is visible to ssh-agent by running the following command:  ssh-add -L  If the command says that no identity is available, you'll need to add your key:  ssh-add yourkey   On Mac OS X, ssh-agent will \"forget\" this key, once it gets restarted during reboots. But you can import your SSH keys into Keychain using this command:  /usr/bin/ssh-add -K yourkey  "
  },
  
  
  {
    "title": "Working with Comments",
    
    "url": "/guides/working-with-comments/",
    "body": " Working with Comments  Pull Request Comments Pull Request Comments on a Line Commit Comments  For any Pull Request, GitHub provides three kinds of comment views: comments on the Pull Request as a whole, comments on a specific line within the Pull Request, and comments on a specific commit within the Pull Request. Each of these types of comments goes through a different portion of the GitHub API. In this guide, we'll explore how you can access and manipulate each one. For every example, we'll be using this sample Pull Request made on the \"octocat\" repository. As always, samples can be found in our platform-samples repository.  Pull Request Comments To access comments on a Pull Request, you'll go through the Issues API. This may seem counterintuitive at first. But once you understand that a Pull Request is just an Issue with code, it makes sense to use the Issues API to create comments on a Pull Request. We'll demonstrate fetching Pull Request comments by creating a Ruby script using Octokit.rb. You'll also want to create a personal access token. The following code should help you get started accessing comments from a Pull Request using Octokit.rb: require 'octokit' # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below client = Octokit::Client.new :access_token =&gt; ENV['MY_PERSONAL_TOKEN'] client.issue_comments(\"octocat/Spoon-Knife\", 1176).each do |comment| username = comment[:user][:login] post_date = comment[:created_at] content = comment[:body] puts \"#{username} made a comment on #{post_date}. It says:\\n'#{content}'\\n\" end  Here, we're specifically calling out to the Issues API to get the comments (issue_comments), providing both the repository's name (octocat/Spoon-Knife), and the Pull Request ID we're interested in (1176). After that, it's simply a matter of iterating through the comments to fetch information about each one.  Pull Request Comments on a Line Within the diff view, you can start a discussion on a particular aspect of a singular change made within the Pull Request. These comments occur on the individual lines within a changed file. The endpoint URL for this discussion comes from the Pull Request Review API. The following code fetches all the Pull Request comments made on files, given a single Pull Request number: require 'octokit' # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below client = Octokit::Client.new :access_token =&gt; ENV['MY_PERSONAL_TOKEN'] client.pull_request_comments(\"octocat/Spoon-Knife\", 1176).each do |comment| username = comment[:user][:login] post_date = comment[:created_at] content = comment[:body] path = comment[:path] position = comment[:position] puts \"#{username} made a comment on #{post_date} for the file called #{path}, on line #{position}. It says:\\n'#{content}'\\n\" end  You'll notice that it's incredibly similar to the example above. The difference between this view and the Pull Request comment is the focus of the conversation. A comment made on a Pull Request should be reserved for discussion or ideas on the overall direction of the code. A comment made as part of a Pull Request review should deal specifically with the way a particular change was implemented within a file.  Commit Comments The last type of comments occur specifically on individual commits. For this reason, they make use of the commit comment API. To retrieve the comments on a commit, you'll want to use the SHA1 of the commit. In other words, you won't use any identifier related to the Pull Request. Here's an example: require 'octokit' # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!! # Instead, set and test environment variables, like below client = Octokit::Client.new :access_token =&gt; ENV['MY_PERSONAL_TOKEN'] client.commit_comments(\"octocat/Spoon-Knife\", \"cbc28e7c8caee26febc8c013b0adfb97a4edd96e\").each do |comment| username = comment[:user][:login] post_date = comment[:created_at] content = comment[:body] puts \"#{username} made a comment on #{post_date}. It says:\\n'#{content}'\\n\" end  Note that this API call will retrieve single line comments, as well as comments made on the entire commit."
  },
  
  
  {
    "title": "GitHub Developer",
    
    "url": "/index/",
    "body": "   Leverage the power of PerfectGym in your app.  Get started with one of our guides, or jump straight into the API documentation. Browse the documentation  "
  },
  
  
  
  
  
  
  
  
  
  
  
  {}
]
